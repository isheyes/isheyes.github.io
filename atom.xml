<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zxy&#39;s Note</title>
  <subtitle>心若向阳，无畏悲伤！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/"/>
  <updated>2016-06-22T08:02:31.000Z</updated>
  <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/</id>
  
  <author>
    <name>zxy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>xcode中快速定位文件目录并创建文件方法</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2016/06/22/xcodeBuildNewFile/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2016/06/22/xcodeBuildNewFile/</id>
    <published>2016-06-22T08:00:09.000Z</published>
    <updated>2016-06-22T08:02:31.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1、快速定位到目录快捷键&quot;&gt;&lt;a href=&quot;#1、快速定位到目录快捷键&quot; class=&quot;headerlink&quot; title=&quot;1、快速定位到目录快捷键&quot;&gt;&lt;/a&gt;1、快速定位到目录快捷键&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;command + shift + j&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、通过⬆️⬇️控制选中的目录&quot;&gt;&lt;a href=&quot;#2、通过⬆️⬇️控制选中的目录&quot; class=&quot;headerlink&quot; title=&quot;2、通过⬆️⬇️控制选中的目录&quot;&gt;&lt;/a&gt;2、通过⬆️⬇️控制选中的目录&lt;/h3&gt;&lt;h3 id=&quot;3、按下回车进入目录编辑模式，并command-c拷贝目录名称&quot;&gt;&lt;a href=&quot;#3、按下回车进入目录编辑模式，并command-c拷贝目录名称&quot; class=&quot;headerlink&quot; title=&quot;3、按下回车进入目录编辑模式，并command+c拷贝目录名称&quot;&gt;&lt;/a&gt;3、按下回车进入目录编辑模式，并command+c拷贝目录名称&lt;/h3&gt;&lt;h3 id=&quot;4、新建文件&quot;&gt;&lt;a href=&quot;#4、新建文件&quot; class=&quot;headerlink&quot; title=&quot;4、新建文件&quot;&gt;&lt;/a&gt;4、新建文件&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;command + n&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;5、把上步拷贝的文件夹名称command-v粘贴到要创建的文件名上&quot;&gt;&lt;a href=&quot;#5、把上步拷贝的文件夹名称command-v粘贴到要创建的文件名上&quot; class=&quot;headerlink&quot; title=&quot;5、把上步拷贝的文件夹名称command+v粘贴到要创建的文件名上&quot;&gt;&lt;/a&gt;5、把上步拷贝的文件夹名称command+v粘贴到要创建的文件名上&lt;/h3&gt;&lt;h3 id=&quot;最后只要下一步下一步就可以创建完成一个文件，创建多个重复以上即可，enjoy-it-！&quot;&gt;&lt;a href=&quot;#最后只要下一步下一步就可以创建完成一个文件，创建多个重复以上即可，enjoy-it-！&quot; class=&quot;headerlink&quot; title=&quot;最后只要下一步下一步就可以创建完成一个文件，创建多个重复以上即可，enjoy it~！~~&quot;&gt;&lt;/a&gt;最后只要下一步下一步就可以创建完成一个文件，创建多个重复以上即可，enjoy it~！~~&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、快速定位到目录快捷键&quot;&gt;&lt;a href=&quot;#1、快速定位到目录快捷键&quot; class=&quot;headerlink&quot; title=&quot;1、快速定位到目录快捷键&quot;&gt;&lt;/a&gt;1、快速定位到目录快捷键&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="xcode" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/xcode/"/>
    
    
      <category term="xcode" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>swift项目开发中如何自定义log</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2016/06/22/swiftlog/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2016/06/22/swiftlog/</id>
    <published>2016-06-22T07:33:09.000Z</published>
    <updated>2016-06-22T07:40:55.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;使用系统函数打印log的弊端&quot;&gt;&lt;a href=&quot;#使用系统函数打印log的弊端&quot; class=&quot;headerlink&quot; title=&quot;使用系统函数打印log的弊端&quot;&gt;&lt;/a&gt;使用系统函数打印log的弊端&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;非常消耗性能&lt;/li&gt;
&lt;li&gt;如果app部署到AppStore之后用户是看不到log内容的&lt;/li&gt;
&lt;li&gt;所以我们只需要在debug开发调试阶段显示log，部署阶段隐藏log，在oc时代我们可以通过下面的方式实现&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#if DEBUG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define MyLog(id, ...) NSLog((@\&amp;quot;%s [Line %d] \&amp;quot; id),__PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define MyLog(id, ...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;但在swift中没有宏的概念了，我们要怎样实现上述需求呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;swift中实现自定义打印log的方法：&quot;&gt;&lt;a href=&quot;#swift中实现自定义打印log的方法：&quot; class=&quot;headerlink&quot; title=&quot;swift中实现自定义打印log的方法：&quot;&gt;&lt;/a&gt;swift中实现自定义打印log的方法：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func XYLog&amp;lt;T&amp;gt;(message: T, fileName: String = #file, methodName: String = #function, lineNum: Int = #line)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #if DEBUG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;\(methodName)[\(lineNum)]:\(message)&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;注意：&quot;&gt;&lt;a href=&quot;#注意：&quot; class=&quot;headerlink&quot; title=&quot;注意：&quot;&gt;&lt;/a&gt;注意：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在3.0之前，文件路径用__FILE__,方法名用__FUNCTION__,行号用__LINE__&lt;/li&gt;
&lt;li&gt;3.0往后，文件路径用#file,方法名#function,行号用#line，更方便更贴切&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法写好之后还要再设置DEBUG标记才能实现调试时显示，发布时隐藏，如图：&lt;br&gt;&lt;img src=&quot;/images/DebugFlag.png&quot; alt=&quot;DebugFlag.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;设置好之后我们在这里切换Debug和Release模式下分别运行就可以测试，&lt;br&gt;&lt;img src=&quot;/images/switchModel.png&quot; alt=&quot;DebugFlag.png&quot;&gt;&lt;br&gt;Debug调试模式下能够输出打印log，Release模式下则不会输出&lt;/p&gt;
&lt;p&gt;我在第18行调用了上面方法，分别在两种模式下运行结果如图：&lt;br&gt;debug&lt;br&gt;&lt;img src=&quot;/images/debug.png&quot; alt=&quot;debug.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Release&lt;br&gt;&lt;img src=&quot;/images/release.png&quot; alt=&quot;release.png&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用系统函数打印log的弊端&quot;&gt;&lt;a href=&quot;#使用系统函数打印log的弊端&quot; class=&quot;headerlink&quot; title=&quot;使用系统函数打印log的弊端&quot;&gt;&lt;/a&gt;使用系统函数打印log的弊端&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;非常消耗性能&lt;/li&gt;
&lt;li&gt;如果app部署到AppStore之后用户是看不到log内容的&lt;/li&gt;
&lt;li&gt;所以我们只需要在debug开发调试阶段显示log，部署阶段隐藏log，在oc时代我们可以通过下面的方式实现&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="swift" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/swift/"/>
    
    
      <category term="swift" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/swift/"/>
    
      <category term="log" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>swift 3.0（二）：整型、浮点型</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2016/06/21/swift2/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2016/06/21/swift2/</id>
    <published>2016-06-21T03:08:09.000Z</published>
    <updated>2016-06-22T07:44:10.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;2-1、整型&quot;&gt;&lt;a href=&quot;#2-1、整型&quot; class=&quot;headerlink&quot; title=&quot;2.1、整型&quot;&gt;&lt;/a&gt;2.1、整型&lt;/h4&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var imInt: Int = 17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Int.max // 最大值9223372036854775807&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Int.min //最小值-9223372036854775808&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// UInt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var imUInt: UInt = 80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UInt.max  //18446744073709551615&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UInt.min  //0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Int8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Int8.max  //127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Int8.min  //-128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// UInt8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UInt8.max //255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UInt8.min //0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 溢出在Swift语言中是一种编译错误,意思就是说如果超出该类型取值范围不会等到运行阶段在编译阶段就会报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//let a: Int8 = 255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Int16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Int16.max //32767&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Int16.min //-32768&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// UInt16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UInt16.max  //65535&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UInt16.min  //0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Int 32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Int32.max   //2147483647&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Int32.min   //-2147483648&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// UInt32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UInt32.max  //4294967295&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UInt32.min  //0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Int64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Int64.max   //9223372036854775807&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Int64.min   //-9223372036854775808&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// UInt64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UInt64.max  //18446744073709551615&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UInt64.min  //0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 使用0b,0o,0x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let decimalInt: Int = 17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let binaryInt: Int  = 0b10001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let octalInt: Int   = 0o21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let hexInt:Int      = 0x11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 使用_标示数字位，国外人喜欢三位一组，当然按照我们的习惯肯定是四位数字一组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let x = 1_000_000 //老外习惯&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let y = 100_0000  //我们的习惯，程序的阅读次数要远远高于编码次数，所以在允许的前提下要不遗余力的提高代码的可读性。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用表格罗列一下应该更清晰明了，如下图：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;最大值(max)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;最小值(min)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;9223372036854775807&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-9223372036854775808&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UInt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;18446744073709551615&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Int8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;127&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UInt8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;255&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Int16&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;32767&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-32768&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UInt16&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;65535&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Int32&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2147483647&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-2147483648&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UInt32&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4294967295&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Int64&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;9223372036854775807&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-9223372036854775808&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UInt64&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;18446744073709551615&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;2-2、单精度、双精度&quot;&gt;&lt;a href=&quot;#2-2、单精度、双精度&quot; class=&quot;headerlink&quot; title=&quot;2.2、单精度、双精度&quot;&gt;&lt;/a&gt;2.2、单精度、双精度&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Float、Double&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var imFloat: Float = 3.1415926      //3.141593&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var imDouble: Double = 3.1415926    //3.1415926&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;最后强调一点，苹果为了避免隐式类型转换（也叫自动类型转换）导致的安全隐患，在swift中只能通过强制类型转换实现不同数据类型之间的计算，比如Int类型和Double类型计算，系统不会将Int类型自动转换成Double类型，也不会将Double类型自动转换成Int类型，必须通过强制类型转换将两者转换成一致的数据类型才能计算&lt;/li&gt;
&lt;/ul&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let y: Int = 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let z: Double = 200.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//y + z  直接相加编译阶段会报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Double(y) + z //将Int类型强制转换成Double之后不会有问题了&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们通过CGFloat的定义可以看出CGFloat不是Float类型就是Double类型，这样32位64位都适用，同时CG是CoreGraphics的缩写，苹果为了参数命名统一美观，不管是Float还是Double都用CGFloat来表示吧，大概就是这样吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;2-1、整型&quot;&gt;&lt;a href=&quot;#2-1、整型&quot; class=&quot;headerlink&quot; title=&quot;2.1、整型&quot;&gt;&lt;/a&gt;2.1、整型&lt;/h4&gt;
    
    </summary>
    
      <category term="swift" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/swift/"/>
    
    
      <category term="swift 3.0" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/swift-3-0/"/>
    
  </entry>
  
  <entry>
    <title>swift 3.0（一）：常量和变量</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2016/06/20/swift1/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2016/06/20/swift1/</id>
    <published>2016-06-20T04:21:56.000Z</published>
    <updated>2016-06-20T03:19:03.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1-1、常量&quot;&gt;&lt;a href=&quot;#1-1、常量&quot; class=&quot;headerlink&quot; title=&quot;1.1、常量&quot;&gt;&lt;/a&gt;1.1、常量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用关键字  &lt;strong&gt;let&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;苹果在新开发语言中将常量单独拿出来是鼓励我们把那些不会变化的量声明成常量，这样可以提高性能。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let num = 100 //苹果提倡的swift编程风格是语句末尾不加分号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//num = 200 常量一经赋值无法再次赋值，无法改变&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-2、变量&quot;&gt;&lt;a href=&quot;#1-2、变量&quot; class=&quot;headerlink&quot; title=&quot;1.2、变量&quot;&gt;&lt;/a&gt;1.2、变量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用关键字 &lt;strong&gt;var&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var index = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index = 3  //变量值可以修改&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a = 1 , b = 2 , c = 3  //可以一次声明多个常量或变量&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;注意，swift是一种强类型语言，拥有type inference（类型推断机制），即使没有显式声明变量类型，系统也会自动推断。查看方式：按住键盘option键，光标放在变量名上会变成一个问号，点击查看即可看到变量或常量的具体类型&lt;/li&gt;
&lt;li&gt;当然也可以显式声明常量或变量&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var myWebsite: String = &amp;quot;http://isheyes.com&amp;quot;  //显式的声明变量类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var x , y , z: Double //一次为多个变量显式声明类型&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-1、常量&quot;&gt;&lt;a href=&quot;#1-1、常量&quot; class=&quot;headerlink&quot; title=&quot;1.1、常量&quot;&gt;&lt;/a&gt;1.1、常量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用关键字  &lt;strong&gt;let&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;苹果在新开发语言中将常量单独拿出来是鼓励我们把那些不会变化的量声明成常量，这样可以提高性能。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let num = 100 //苹果提倡的swift编程风格是语句末尾不加分号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//num = 200 常量一经赋值无法再次赋值，无法改变&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="swift" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/swift/"/>
    
    
      <category term="swift 3.0" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/swift-3-0/"/>
    
  </entry>
  
  <entry>
    <title>《代码大全2》要点摘要（四）</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2015/01/11/code4/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2015/01/11/code4/</id>
    <published>2015-01-10T16:59:56.000Z</published>
    <updated>2016-06-20T03:20:17.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;第十章、使用变量的一般事项&quot;&gt;&lt;a href=&quot;#第十章、使用变量的一般事项&quot; class=&quot;headerlink&quot; title=&quot;第十章、使用变量的一般事项&quot;&gt;&lt;/a&gt;第十章、使用变量的一般事项&lt;/h3&gt;&lt;h4 id=&quot;10-1、变量初始化原则&quot;&gt;&lt;a href=&quot;#10-1、变量初始化原则&quot; class=&quot;headerlink&quot; title=&quot;10.1、变量初始化原则&quot;&gt;&lt;/a&gt;10.1、变量初始化原则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在声明变量的时候初始化&lt;/li&gt;
&lt;li&gt;在靠近变量第一次使用的位置初始化它&lt;/li&gt;
&lt;li&gt;理想情况下，在靠近第一次使用变量的位置声明和定义该变量&lt;/li&gt;
&lt;li&gt;在类的构造函数里初始化该类的数据成员&lt;/li&gt;
&lt;li&gt;检查是否需要重新初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;本章要点&quot;&gt;&lt;a href=&quot;#本章要点&quot; class=&quot;headerlink&quot; title=&quot;本章要点&quot;&gt;&lt;/a&gt;本章要点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;数据初始化过程很容易出错，所以请遵循上面提到的一些原则来避免造成错误&lt;/li&gt;
&lt;li&gt;最小化每个变量的作用域。把同一变量的引用点集中在一起。把变量限定在子程序或类的范围之内。避免使用全局数据。&lt;/li&gt;
&lt;li&gt;使用相同变量的语句尽可能集中在一起&lt;/li&gt;
&lt;li&gt;把每个变量用于唯一的用途&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第十一章、变量名的力量&quot;&gt;&lt;a href=&quot;#第十一章、变量名的力量&quot; class=&quot;headerlink&quot; title=&quot;第十一章、变量名的力量&quot;&gt;&lt;/a&gt;第十一章、变量名的力量&lt;/h3&gt;&lt;h4 id=&quot;11-1、选择好变量名的注意事项&quot;&gt;&lt;a href=&quot;#11-1、选择好变量名的注意事项&quot; class=&quot;headerlink&quot; title=&quot;11.1、选择好变量名的注意事项&quot;&gt;&lt;/a&gt;11.1、选择好变量名的注意事项&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;变量的好与坏在很大程度取决于它的名字的好坏，所以在给变量命名的时候要格外小心谨慎&lt;/li&gt;
&lt;li&gt;一个好的变量名是可读的、易记得和恰如其分的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;最重要的命名注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为变量命名时最重要的考虑事项是，该名字要完全、准确地描述出该变量所代表的事物。获得好名字的一种使用技巧就是用文字表达变量所代表的是什么？通常，对变量的描述就是最佳的变量名。这种名字很容易阅读，因为其中并不包含晦涩的缩写，同时也没有歧义。因为它是对该事物的完整描述，因为不会和其它事物混淆。另外，由于这一名字与所表达的概念相似，因此很容易记忆。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量用途&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;好名字  好描述&lt;/th&gt;
&lt;th&gt;坏名字   差描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;到期的支票累额&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;runningTotal,checkTotal&lt;/td&gt;
&lt;td&gt;written,ct,x,x1,x2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高速列车的运行速度&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;volocity,trainVelocity&lt;/td&gt;
&lt;td&gt;velt,v.tv,x,x1,x2,train&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;当前日期&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;currentDate,todayDate&lt;/td&gt;
&lt;td&gt;cd,current,c,x,x1,x2,date&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;每页的行数&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;linePerPage&lt;/td&gt;
&lt;td&gt;lpp,lines,l,x,x1,x2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;currentDate和todayDate都是很好的名字，因为他们都完全而且准确的描述出了“当前日期”这一概念。事实上，这两个名字都用了非常直白的词。程序员们有时候会忽视这些普通词语，而他们往往是最明确的。cd和c是很糟糕的命名，因为他们太短，同时又不具有描述性。current也很糟，因为它并没有告诉你是当前设么。date看上去不错，但经过最后推敲它也只是个坏名字，因为这里所说的日期并不是所有的日期均可，而只是特指当前日期；而date本身并未表达出这层含义。x、x1和x2永远是坏名字——传统上用x代表一个未知量；如果不希望你的变量所代表的是一个未知量，那么请考虑一个更好的名字吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;最适当的名字长度&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量名的平均长度应该在8到16个为宜，这个也不是绝对的，它强调的是，如果你看自己写的代码时发现了很多更短的名字，那么你需要认证检查，确保这些名字的含义足够清晰。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;变量名太长、太短和刚好合适的实例&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;太长&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;numberOfPerpleOnTheUsOlympicTeam&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;太短&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;n,np,ntm;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;正好&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;numTeamMembers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;变量名中的计算值限定词，类似于：Total,Sum,Average,Max,Mix,Record,String,Pointer等，在命名变量时，请把限定词加在名字的最后，举例如reverueTotal(总收入)、expenseTotal（总支出）、revenueAverage（平均收入）、expenseAverage（平均支出）这组名字的变量具有非常优雅的对称性。而从totalRevenue、expenseTotal、revenueAverage、averageExpense这组名字中则看不出什么规律来。总之，一致性可以提高可读性，简化维护工作。&lt;/li&gt;
&lt;li&gt;当然把计算的量放在名字最后的这条规则也有例外，那就是Num限定词的位置已经是约定成俗的。Num放在变量名的开始位置代表一个总数：numCustomers表示的是员工的总数。Num放在变量名的结束位置代表一个下标：customerNum表示当前员工的序号。然而由于这样使用Num常常会带来麻烦，因此可能更好的办法是避开这些问题，用Count或者Total来代表员工的总数，用Index来指代某个特定的员工。这样，customerCount就代表员工的总数，customerIndex代表某个特定的员工。&lt;/li&gt;
&lt;li&gt;变量名中常用对仗词&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;begin/end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;first/last&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;locked/unlocked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;min/max&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;next/previous&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;old/new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opened/closed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;visible/invisible&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source/destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;up/down&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;11-2、为布尔变量命名&quot;&gt;&lt;a href=&quot;#11-2、为布尔变量命名&quot; class=&quot;headerlink&quot; title=&quot;11.2、为布尔变量命名&quot;&gt;&lt;/a&gt;11.2、为布尔变量命名&lt;/h4&gt;&lt;p&gt;应该遵循的几条原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;done 用done表示某件事情已经完成。这一变量可用于表示循环结束或者一些其他的操作已完成。在事情完成之前把done设为false，在事情完成之后把它设为true&lt;/li&gt;
&lt;li&gt;error 用error表示有错误发生。在错误发生之前把变量值设为false，在错误已经发生时把它设为true&lt;/li&gt;
&lt;li&gt;found  用found来表明某个值已经找到了。在还没有找到该值的时候把found设为false，一旦找到该值就把found设为true。在一个数组中查找某个值，在文件中搜寻某员工的ID，在一沓支票中寻找某张特定金额的支票等等的时候，都可用用found。&lt;/li&gt;
&lt;li&gt;success或ok  用success或ok来表明一项操作是否成功。在操作失败的时候把该变量设为false，在操作成功的时候把其设为true。如果可以请用一个更具体的名字来代替success，以便更具体的描述成功的含义。如果完成处理就表示这个程序执行成功，那么或许你应该用proccessingComplete来取而代之。如果找到某个值就是程序执行成功，那么也许应该换用found。&lt;/li&gt;
&lt;li&gt;给布尔变量赋予隐含“真/假”含义的名字，像done、success这样的名字都隐含有这样的含义，要么是true要么是false；某件事完成了或者没完成，成功了或者失败了只有两种情况，不会有第三种情况。而像status和sourceFile这样的名字却是很糟糕的布尔变量名，他们没有明确的true货false。应该把status替换为类似于error或者statusOK这样的名字，同时把sourceFile替换为sourceFileAvailable、sourceFileFound，或者其他能体现该变量所代表含义的名字。&lt;/li&gt;
&lt;li&gt;有些程序员喜欢在他们写的布尔变量名前加Is，这样变量名就变成了一个问题：isdone?isError?isFound?isProcessingComplete?用true或false回答问题也就为该变量给出了取值。这种方法的优点之一是它不能用于模糊不清的名字：isStatus？这毫无意义。它的缺点之一是降低了简单逻辑表达式的可读性：if（isFound）的可读性略差于if（found）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;11-3、为什么要有命名规则？&quot;&gt;&lt;a href=&quot;#11-3、为什么要有命名规则？&quot; class=&quot;headerlink&quot; title=&quot;11.3、为什么要有命名规则？&quot;&gt;&lt;/a&gt;11.3、为什么要有命名规则？&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;要求你更多的按照规矩行事&lt;/li&gt;
&lt;li&gt;有助于在项目之间传递知识，减少沟通成本&lt;/li&gt;
&lt;li&gt;有助于你在新项目中更快速的学习代码&lt;/li&gt;
&lt;li&gt;有助于减少名字增生&lt;/li&gt;
&lt;li&gt;弥补编程语言的不足之处&lt;/li&gt;
&lt;li&gt;强调相关变量之间的关系&lt;/li&gt;
&lt;li&gt;关键之处在于，采用任何一项规则都要好于没有规则。规则可能是武断的。命名规则的威力并非来源于你所采取的某个特定规则，而是来源于以下事实：规则的存在为你的代码增加了结构，减少了你需要考虑的事情。&lt;/li&gt;
&lt;li&gt;代码阅读的次数远远多于编写的次数。确保你所取得名字更侧重于阅读方便而不是编写方便。&lt;/li&gt;
&lt;li&gt;好的变量名是提高程序可读性的一项关键要素。&lt;/li&gt;
&lt;li&gt;最后总结一句话：你一定会因使用了某种命名规则而受益。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第十章、使用变量的一般事项&quot;&gt;&lt;a href=&quot;#第十章、使用变量的一般事项&quot; class=&quot;headerlink&quot; title=&quot;第十章、使用变量的一般事项&quot;&gt;&lt;/a&gt;第十章、使用变量的一般事项&lt;/h3&gt;&lt;h4 id=&quot;10-1、变量初始化原则&quot;&gt;&lt;a href=&quot;#10-1、变量初始化原则&quot; class=&quot;headerlink&quot; title=&quot;10.1、变量初始化原则&quot;&gt;&lt;/a&gt;10.1、变量初始化原则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在声明变量的时候初始化&lt;/li&gt;
&lt;li&gt;在靠近变量第一次使用的位置初始化它&lt;/li&gt;
&lt;li&gt;理想情况下，在靠近第一次使用变量的位置声明和定义该变量&lt;/li&gt;
&lt;li&gt;在类的构造函数里初始化该类的数据成员&lt;/li&gt;
&lt;li&gt;检查是否需要重新初始化&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="读书" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="代码大全2" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A82/"/>
    
  </entry>
  
  <entry>
    <title>《代码大全2》要点摘要（三）</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2015/01/08/code3/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2015/01/08/code3/</id>
    <published>2015-01-08T14:55:34.000Z</published>
    <updated>2016-06-20T03:20:16.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;第七章、高质量的子程序&quot;&gt;&lt;a href=&quot;#第七章、高质量的子程序&quot; class=&quot;headerlink&quot; title=&quot;第七章、高质量的子程序&quot;&gt;&lt;/a&gt;第七章、高质量的子程序&lt;/h3&gt;&lt;h4 id=&quot;7-1、什么是子程序？&quot;&gt;&lt;a href=&quot;#7-1、什么是子程序？&quot; class=&quot;headerlink&quot; title=&quot;7.1、什么是子程序？&quot;&gt;&lt;/a&gt;7.1、什么是子程序？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;子程序就是为实现一个特定的目的而编写的一个可被调用的方法（method）或过程（procedure）。就是我们开发中常说的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;总结：创建子程序的理由&quot;&gt;&lt;a href=&quot;#总结：创建子程序的理由&quot; class=&quot;headerlink&quot; title=&quot;总结：创建子程序的理由&quot;&gt;&lt;/a&gt;总结：创建子程序的理由&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;降低复杂度&lt;/li&gt;
&lt;li&gt;引入中间的、易懂的抽象&lt;/li&gt;
&lt;li&gt;避免代码重复&lt;/li&gt;
&lt;li&gt;支持子类化&lt;/li&gt;
&lt;li&gt;隐藏顺序&lt;/li&gt;
&lt;li&gt;隐藏指针操作&lt;/li&gt;
&lt;li&gt;提高可移植性&lt;/li&gt;
&lt;li&gt;简化复杂的逻辑判断&lt;/li&gt;
&lt;li&gt;改善性能&lt;br&gt;除此之外，创建类的很多理由也是创建子程序的理由&lt;/li&gt;
&lt;li&gt;隔离复杂度&lt;/li&gt;
&lt;li&gt;隐藏实现细节&lt;/li&gt;
&lt;li&gt;限制变化所带来的影响&lt;/li&gt;
&lt;li&gt;隐藏全局数据&lt;/li&gt;
&lt;li&gt;形成中央控制点&lt;/li&gt;
&lt;li&gt;促成可重用的代码&lt;/li&gt;
&lt;li&gt;达到特定的重构目的&lt;/li&gt;
&lt;/ul&gt;
  &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;7-2、在子程序层上设计&quot;&gt;&lt;a href=&quot;#7-2、在子程序层上设计&quot; class=&quot;headerlink&quot; title=&quot;7.2、在子程序层上设计&quot;&gt;&lt;/a&gt;7.2、在子程序层上设计&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;对子程序而言，内聚性是指子程序中各种操作之间联系的紧密程度。有些程序员更喜欢使用“强度（strength）”这一术语：一个子程序中各种操作之间的联系有多强？像Cosine（）（余弦函数）这样的函数是极端内聚的，因为整个程序只完成一项功能。而CosineAndTan（）（余弦和正切）这个函数的内聚性相对较弱，因为它完成了多于一项的操作。我们的目标是让每一个子程序只把一件事做好，不再做任何其他事情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;7-3、好的子程序（方法）的名字&quot;&gt;&lt;a href=&quot;#7-3、好的子程序（方法）的名字&quot; class=&quot;headerlink&quot; title=&quot;7.3、好的子程序（方法）的名字&quot;&gt;&lt;/a&gt;7.3、好的子程序（方法）的名字&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;描述子程序所做的所有事情，如一个方法的作用是计算报表总额并打开输出一个文件，如果把它命名为ComputeReportTotals（）就不算完整。但如果要命名为ComputeReportTotalsAndOpenOutputFile（）是很完整，但这样又感觉太长且有点傻。这里主要是因为这个子程序功能不够单一，产生了一些副作用，我们要做的就是换种编程方式，直截了当地解决问题而不产生副作用。&lt;/li&gt;
&lt;li&gt;避免使用无意义的、模糊或表达不清的动词，比如HandleOutput（）改为FormatAndPrintOutput（），就很容易看清这个子程序的功能了。&lt;/li&gt;
&lt;li&gt;不要仅通过数字来形成不同的子程序名字&lt;/li&gt;
&lt;li&gt;根据需要确定子程序名字的长度，研究表明，变量名的最佳长度是9到15个字符。子程序（方法）名字通常是跟在对象名字之后，这实际上为其免费提供了一部分名字。总的来说，给方法命名的中点是尽可能含义清晰，也就是说，子程序名的长短要视该名字是否清晰易懂而定。&lt;/li&gt;
&lt;li&gt;给函数命名时要对返回值有所描述。&lt;/li&gt;
&lt;li&gt;给过程起名时使用语气强烈的动词加宾语的形式。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;准确使用对仗词,常见对仗词组有：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;add/remove&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;begin/end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create/destroy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;first/last&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;get/put&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;get/set&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;increment/decrement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;insert/delete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lock/unlock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;min/max&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;next/previous&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;old/new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open/close&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;show/hide&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source/target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start/stop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;up/down&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为常用操作确立命名规则&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;7-4、子程序可以写多长？&quot;&gt;&lt;a href=&quot;#7-4、子程序可以写多长？&quot; class=&quot;headerlink&quot; title=&quot;7.4、子程序可以写多长？&quot;&gt;&lt;/a&gt;7.4、子程序可以写多长？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;与其对子程序的长度强加限制，还不如让下面这些因素——如子程序的内聚性、嵌套的层次、变量的数量、决策点的数量、解释子程序用意所需的注释数量以及其他一些跟复杂度相关的考虑事项等——来决定子程序的长度。也就是，如果要编写一段超过200行代码的子程序，那么就要小心了。对于超过200行代码的子程序来说，没有哪项研究发现它能降低成本和/或降低出错率，而且超过200行后，你迟早会在可读性方面遇到问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;7-5、如何使用子程序参数&quot;&gt;&lt;a href=&quot;#7-5、如何使用子程序参数&quot; class=&quot;headerlink&quot; title=&quot;7.5、如何使用子程序参数&quot;&gt;&lt;/a&gt;7.5、如何使用子程序参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如果几个子程序都使用了类似的一些参数，应该让这些参数的排列顺序保持一致。&lt;/li&gt;
&lt;li&gt;使用所有的参数。&lt;/li&gt;
&lt;li&gt;把状态或出错变量放在最后&lt;/li&gt;
&lt;li&gt;不要把子程序的参数用作工作变量&lt;/li&gt;
&lt;li&gt;在接口中对参数的假定加以说明&lt;/li&gt;
&lt;li&gt;把子程序的参数个数限制在大约7个以内。对于人的理解力来说，7是一个神奇的数字。心理学研究发现，通常人类很难同时记住超过7个单位的信息。这一发现已经用于各个领域之中，因此，假定人不能同时记住超过约7个的子程序参数，也是合适的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;本章要点：&quot;&gt;&lt;a href=&quot;#本章要点：&quot; class=&quot;headerlink&quot; title=&quot;本章要点：&quot;&gt;&lt;/a&gt;本章要点：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建子程序最主要的目的是提高程序的可管理性，当然也有其他一些好的理由。其中，节省代码空间只是一个次要原因；提高可读性、可靠性和可修改性原因都更重要一些。&lt;/li&gt;
&lt;li&gt;有时候把一些简单的操作写成独立的子程序也非常有价值。&lt;/li&gt;
&lt;li&gt;子程序可以按照内聚性分为很多类，而你应该让大多数子程序具有功能上的内聚性，这是最佳的一种内聚性。&lt;/li&gt;
&lt;li&gt;子程序的名字是它的质量的指示器。如果名字糟糕但恰如其分，那就说明这个子程序设计的很差劲。如果名字糟糕且又不准确，那么它就反应不出程序是干什么的。不管怎样，糟糕 名字都意味着程序需要修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第八章、防御式编程&quot;&gt;&lt;a href=&quot;#第八章、防御式编程&quot; class=&quot;headerlink&quot; title=&quot;第八章、防御式编程&quot;&gt;&lt;/a&gt;第八章、防御式编程&lt;/h3&gt;&lt;h4 id=&quot;8-1什么是防御式编程？&quot;&gt;&lt;a href=&quot;#8-1什么是防御式编程？&quot; class=&quot;headerlink&quot; title=&quot;8.1什么是防御式编程？&quot;&gt;&lt;/a&gt;8.1什么是防御式编程？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;防御式编程并不是说让你编程时持“防备批评或攻击”的态度——“它就是这么工作”！这一概念来自防御式驾驶。在防御式驾驶中要建立这样一种思维，那就是你永远也不能确定另一位司机将要做什么。这样 才能确保在其他人做出危险动作时你也不会受到伤害。你要承担起保护自己的责任，哪怕是其他司机犯的错误。防御式编程的主要思想是：子程序应该不因传入错误数据而破坏，哪怕是其他子程序产生的错误数据。更一般的说，其核心想法是要承认程序都会有问题，都需要被修改，聪明的程序员应该根据这一点来编程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第九章、伪代码编程过程&quot;&gt;&lt;a href=&quot;#第九章、伪代码编程过程&quot; class=&quot;headerlink&quot; title=&quot;第九章、伪代码编程过程&quot;&gt;&lt;/a&gt;第九章、伪代码编程过程&lt;/h3&gt;&lt;h4 id=&quot;9-1伪代码编程有什么好处？&quot;&gt;&lt;a href=&quot;#9-1伪代码编程有什么好处？&quot; class=&quot;headerlink&quot; title=&quot;9.1伪代码编程有什么好处？&quot;&gt;&lt;/a&gt;9.1伪代码编程有什么好处？&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;伪代码使得评审更容易。&lt;/li&gt;
&lt;li&gt;伪代码支持反复迭代精化得思想。从一个高层设计开始，把这一设计精化为伪代码，然后再把伪代码精化为源代码。这样持续不断的小步精化，使你可以在把它推向更低的细节层次的同时，不断检查已形成的设计。这样做的结果，是你可能在最高的层次上发现最高层次的错误。在中间的层次上发现中间层次的错误，而在最低的层次上发现最低层次的错误——避免其中的任何错误变成真正的问题或者危害到更细节层次的工作。&lt;/li&gt;
&lt;li&gt;伪代码使变更更加容易。&lt;/li&gt;
&lt;li&gt;伪代码能使给代码作注释的工作量减到最少。&lt;/li&gt;
&lt;li&gt;伪代码比其他形式的设计文档更容易维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;本章要点&quot;&gt;&lt;a href=&quot;#本章要点&quot; class=&quot;headerlink&quot; title=&quot;本章要点&quot;&gt;&lt;/a&gt;本章要点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建类和子程序通常都是一个迭代的过程。在创建子程序的过程中获得的认识常常会反过来影响类的设计。&lt;/li&gt;
&lt;li&gt;伪代码常常用来描述该做什么，而不是要怎么去做。&lt;/li&gt;
&lt;li&gt;伪代码编程过程是一个行之有效的做详细设计的工具，它同时让编码工作更容易。伪代码会直接转化为注释，从而确保了注释的准确性和实用性。&lt;/li&gt;
&lt;li&gt;不要停留在你所想到的第一个设计方案上。反复使用伪代码做出多种方案，然后选出其中最佳的一种方案再开始编码。&lt;/li&gt;
&lt;li&gt;每一步完成后都要检查你的工作成果，还要鼓励其他人帮你检查。这样你就会在投入精力最少的时候，用最低的成本发现错误。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第七章、高质量的子程序&quot;&gt;&lt;a href=&quot;#第七章、高质量的子程序&quot; class=&quot;headerlink&quot; title=&quot;第七章、高质量的子程序&quot;&gt;&lt;/a&gt;第七章、高质量的子程序&lt;/h3&gt;&lt;h4 id=&quot;7-1、什么是子程序？&quot;&gt;&lt;a href=&quot;#7-1、什么是子程序？&quot; class=&quot;headerlink&quot; title=&quot;7.1、什么是子程序？&quot;&gt;&lt;/a&gt;7.1、什么是子程序？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;子程序就是为实现一个特定的目的而编写的一个可被调用的方法（method）或过程（procedure）。就是我们开发中常说的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;总结：创建子程序的理由&quot;&gt;&lt;a href=&quot;#总结：创建子程序的理由&quot; class=&quot;headerlink&quot; title=&quot;总结：创建子程序的理由&quot;&gt;&lt;/a&gt;总结：创建子程序的理由&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;降低复杂度&lt;/li&gt;
&lt;li&gt;引入中间的、易懂的抽象&lt;/li&gt;
&lt;li&gt;避免代码重复&lt;/li&gt;
&lt;li&gt;支持子类化&lt;/li&gt;
&lt;li&gt;隐藏顺序&lt;/li&gt;
&lt;li&gt;隐藏指针操作&lt;/li&gt;
&lt;li&gt;提高可移植性&lt;/li&gt;
&lt;li&gt;简化复杂的逻辑判断&lt;/li&gt;
&lt;li&gt;改善性能&lt;br&gt;除此之外，创建类的很多理由也是创建子程序的理由&lt;/li&gt;
&lt;li&gt;隔离复杂度&lt;/li&gt;
&lt;li&gt;隐藏实现细节&lt;/li&gt;
&lt;li&gt;限制变化所带来的影响&lt;/li&gt;
&lt;li&gt;隐藏全局数据&lt;/li&gt;
&lt;li&gt;形成中央控制点&lt;/li&gt;
&lt;li&gt;促成可重用的代码&lt;/li&gt;
&lt;li&gt;达到特定的重构目的&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="读书" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="代码大全2" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A82/"/>
    
  </entry>
  
  <entry>
    <title>《代码大全2》要点摘要（二）</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2015/01/05/code2/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2015/01/05/code2/</id>
    <published>2015-01-05T04:09:19.000Z</published>
    <updated>2016-06-20T03:20:15.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;第四章、关键的“构建”决策&quot;&gt;&lt;a href=&quot;#第四章、关键的“构建”决策&quot; class=&quot;headerlink&quot; title=&quot;第四章、关键的“构建”决策&quot;&gt;&lt;/a&gt;第四章、关键的“构建”决策&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每种编程语言都有其优点和缺点。要知道你使用语言的明确优点和缺点。&lt;/li&gt;
&lt;li&gt;在开始编程之前，做好一些约定（convention）。“改变代码使之符合这些约定”是近乎不可能的。&lt;/li&gt;
&lt;li&gt;“构建的实践方法”的种类比任何单个项目能用到的要多。有意识地选择最适合你的项目的实践方法。&lt;/li&gt;
&lt;li&gt;问问你自己，你采用的编程实践是对你所用的编程语言的正确响应，还是受它的控制？要记得“深入一种语言去编程”，不要仅“在一种语言上编程”。&lt;/li&gt;
&lt;li&gt;你在技术浪潮中的位置决定了哪种方法是有效的——甚至是可能用到的。确定你在技术浪潮中的位置，并相应调整计划和预期目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第五章、软件构建中的设计&quot;&gt;&lt;a href=&quot;#第五章、软件构建中的设计&quot; class=&quot;headerlink&quot; title=&quot;第五章、软件构建中的设计&quot;&gt;&lt;/a&gt;第五章、软件构建中的设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设计范畴内的特征&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最小复杂度（Minimal complexity）&lt;/li&gt;
&lt;li&gt;易于维护（Ease of maintenance）&lt;/li&gt;
&lt;li&gt;松散耦合（loose coupling）（抵耦合）&lt;/li&gt;
&lt;li&gt;可扩展性（extensibility）&lt;/li&gt;
&lt;li&gt;可重用性（reusability）&lt;/li&gt;
&lt;li&gt;高扇入（high fan-in）：多使用底层工具类（utility class）&lt;/li&gt;
&lt;li&gt;低扇出（low fan-out）：一个类里尽量少使用其他类，超过7个可以认为高扇出&lt;/li&gt;
&lt;li&gt;可移植性（portability）&lt;/li&gt;
&lt;li&gt;精简性（leanness）&lt;/li&gt;
&lt;li&gt;层次性（stratification）&lt;/li&gt;
&lt;li&gt;标准技术（Standard techniques）&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个程序中的设计层次&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.系统&lt;/li&gt;
&lt;li&gt;2.首先被组织为子系统&lt;/li&gt;
&lt;li&gt;3.子系统被进一步分解为类&lt;/li&gt;
&lt;li&gt;4.然后类又被分解为子程序和数据&lt;/li&gt;
&lt;li&gt;5.每个子程序的内部也需要进行设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;举个例子，把一个系统划分为六个子系统。在没有定义任何规则时，热力学第二定律就会发生作用，整个系统的熵就会增加。熵所以增加的一种原因是，如果不对子系统间的通信施加任何限制，那么他们之间的通信就会肆意发生,如图：&lt;br&gt;&lt;img src=&quot;/images/system1.png&quot; alt=&quot;system1.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/system2.png&quot; alt=&quot;system2.png&quot;&gt;&lt;br&gt;施加若干通信规则后，子系统之间的交互得以显著的简化&lt;br&gt;&lt;img src=&quot;/images/system3.png&quot; alt=&quot;system3.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;抽象：抽象是一种能让你关注某一概念的同时可以放心的忽略其中一些细节的能力——在不同的层次处理不同的细节。抽象无处不在，日常生活中城镇、房屋、门、门把手等等我们都在不知不觉的用到了抽象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;关于封装迄今为止感觉类比的最贴切的一段描述&lt;ul&gt;
&lt;li&gt;封装实现细节：封装填补了抽象留下的空白。抽象是说：”可以让你从高层的细节来看待一个对象。“而封装则说：”除此之外，你不能看到对象的任何其他细节层次“。&lt;/li&gt;
&lt;li&gt;继续刚才关于房屋材质的比喻：封装是说，你可以从房屋的外面看，但不能靠的太近把门的细节都看清楚。可以让你知道哪里有门，门是开着的还是关着的，但不能让你知道门是木制的、纤维玻璃的、钢质的还是其他什么材质的，当然更不能让你看到每一根木纤维。&lt;/li&gt;
&lt;li&gt;封装是说：不只是让你能用简化的视图来看复杂的概念，同时还不能让你看到复杂概念的任何细节。你能看得到的就是你能——全部——得到的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;信息隐藏中所说的秘密主要分为两大类：&lt;ul&gt;
&lt;li&gt;隐藏复杂度，这样你就不用再去应付它，除非你要特别关注的时候。&lt;/li&gt;
&lt;li&gt;隐藏变化源，这样当发生变化时，其影响就被限制在局部范围内。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;松散耦合的关键在于，一个有效的模块提供出了一层附加的抽象——一旦你写好了它，你就可以想当然地去用它。这样就降低了整体系统的复杂度，使得你可以在同一时间只关注一件事情。如果对一个模块的使用要求你同时关注好几件事——其内部工作的细节、对全局数据的修改、不确定的功能点等——那么就失去了抽象的能力，模块所具有的管理复杂度的能力就被削弱或完全丧失了。&lt;/li&gt;
&lt;li&gt;类和子程序是降低复杂度的首选和最重要的智力工具。如果他们没有帮助你简化工作，那么它们就是失职的。&lt;/li&gt;
&lt;li&gt;关于设计启发的总结：&lt;ul&gt;
&lt;li&gt;寻求现实世界的对象（object，物体）&lt;/li&gt;
&lt;li&gt;形成一致的抽象&lt;/li&gt;
&lt;li&gt;封装实现细节&lt;/li&gt;
&lt;li&gt;在可能的情况下继承&lt;/li&gt;
&lt;li&gt;藏住秘密（信息隐藏）&lt;/li&gt;
&lt;li&gt;找出容易改变的区域&lt;/li&gt;
&lt;li&gt;保持松散耦合&lt;/li&gt;
&lt;li&gt;探寻通用的设计模式&lt;/li&gt;
&lt;li&gt;高内聚&lt;/li&gt;
&lt;li&gt;构造分层结构&lt;/li&gt;
&lt;li&gt;严格描述类契约&lt;/li&gt;
&lt;li&gt;分配职责&lt;/li&gt;
&lt;li&gt;为测试而设计&lt;/li&gt;
&lt;li&gt;避免失误&lt;/li&gt;
&lt;li&gt;有意识地选择绑定时间&lt;/li&gt;
&lt;li&gt;创建中央控制点&lt;/li&gt;
&lt;li&gt;考虑使用蛮力&lt;/li&gt;
&lt;li&gt;画一个图&lt;/li&gt;
&lt;li&gt;保持设计模块化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;软件的首要技术使命就是管理复杂度。以简单性作为努力目标的设计方案对此最有帮助。&lt;/li&gt;
&lt;li&gt;简单性可以通过两种方式来获取：一是减少在同一时间所关注的本质性复杂度的量，二是避免生成不必要的偶然的复杂度。&lt;/li&gt;
&lt;li&gt;设计是一种启发式的过程。固执于某一种单一方法会损害创新能力，从而损害你的程序。&lt;/li&gt;
&lt;li&gt;好的设计都是迭代的。你尝试的可能性越多，你的最终设计方案就会变得越好。&lt;/li&gt;
&lt;li&gt;信息隐藏是个非常有价值的概念。通过询问”我应该隐藏什么？“能够解决很多困难的设计问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第六章、可以工作的类&quot;&gt;&lt;a href=&quot;#第六章、可以工作的类&quot; class=&quot;headerlink&quot; title=&quot;第六章、可以工作的类&quot;&gt;&lt;/a&gt;第六章、可以工作的类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;抽象数据类型（ADT ： abstract data type）是指一些数据以及对这些数据所进行的操作的集合。&lt;/li&gt;
&lt;li&gt;使用ADT的益处&lt;ul&gt;
&lt;li&gt;可以隐藏实现细节&lt;/li&gt;
&lt;li&gt;改动不会影响整个程序&lt;/li&gt;
&lt;li&gt;让接口能提供更多信息&lt;/li&gt;
&lt;li&gt;更容易提高性能&lt;/li&gt;
&lt;li&gt;让程序的正确性更显而易见&lt;/li&gt;
&lt;li&gt;程序更具有自我说明性&lt;/li&gt;
&lt;li&gt;无需再程序内到处传递数据&lt;/li&gt;
&lt;li&gt;你可以像在现实世界中那样操作实体，而不用再底层实现上操作它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;ADT和类：抽象数据类型构成了“类/class”这一概念的基础。在支持类的编程语言里，你可以把每个抽象数据类型用它自己的类实现。类还涉及到继承和多态两个额外的概念。因此，考虑类的一种方式，就是把它看做是抽象数据类型再加上继承和多态两个概念。&lt;/li&gt;
&lt;li&gt;一些创建类的抽象接口的指导建议：&lt;ul&gt;
&lt;li&gt;类的接口应该展现一致的抽象层次&lt;/li&gt;
&lt;li&gt;一定要理解类所实现的抽象是什么&lt;/li&gt;
&lt;li&gt;提供成对的服务，如操作灯打开，可能需要另一个操作来关闭&lt;/li&gt;
&lt;li&gt;把不相关的信息转移到其他类中&lt;/li&gt;
&lt;li&gt;尽可能让接口可编程，而不是表达语义&lt;/li&gt;
&lt;li&gt;谨防在修改时破坏接口的抽象&lt;/li&gt;
&lt;li&gt;不要添加和接口抽象不一致的公用成员&lt;/li&gt;
&lt;li&gt;同时考虑抽象和内聚性：一个呈现出很好的抽象的类的接口通常也有很高的内聚性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;良好的封装：封装是比抽象更强的概念。抽象通过提供一个可以让你忽略实现细节的模型来管理复杂度，而封装则强制组织你看到实现细节——即便你想这么做。这两个概念之所以相关，是因为没有封装时，抽象往往很容易被打破。依照经验，要么抽象和封装两者共存，要么两者皆失。除此之外没有其它可能。&lt;ul&gt;
&lt;li&gt;尽可能地限制类和成员的可访问性&lt;/li&gt;
&lt;li&gt;不要公开暴露成员数据&lt;/li&gt;
&lt;li&gt;避免把私用的实现细节放入类的接口中&lt;/li&gt;
&lt;li&gt;不要对类的使用者做出任何假设&lt;/li&gt;
&lt;li&gt;避免使用友元类&lt;/li&gt;
&lt;li&gt;让阅读代码比编写代码更方便&lt;/li&gt;
&lt;li&gt;要格外警惕从语义上破坏封装&lt;/li&gt;
&lt;li&gt;留意过于紧密的耦合关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;警惕有超过7个数据成员的类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;研究表明，人们在做其他项目时能记住的离散项目的个数是7±2.如果一个类包含超过7个数据成员，请考虑要不要把它分解为几个更小的类。如果数据成员是整型或字符串这种简单数据类型，可以按7±2的上限来考虑；反之，如果成员都是复杂对象的话，就应该按7±2得下限来考虑了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要么使用继承并进行详细说明，要么就不要用它&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;只有一个实例的类是值得怀疑的（单例除外）&lt;/li&gt;
&lt;li&gt;只有一个派生类的基类也值得怀疑&lt;/li&gt;
&lt;li&gt;派生后覆盖了某个子程序，但在其中没做任何操作，这种情况也值得怀疑&lt;/li&gt;
&lt;li&gt;避免让继承体系过深：依据经验，一般情况下继承超过2到3层时就有麻烦了，过深的继承层次增加了程序的复杂度&lt;/li&gt;
&lt;li&gt;尽量使用多态，避免大量的类型检查&lt;/li&gt;
&lt;li&gt;优先采用深层副本（deep copies），除非论证可行，才采用浅层副本（shallow copies）&lt;/li&gt;
&lt;li&gt;应该避免的类&lt;ul&gt;
&lt;li&gt;避免创建万能类&lt;/li&gt;
&lt;li&gt;消除无关紧要的类&lt;/li&gt;
&lt;li&gt;避免用动词命名的类，只有行为而没有数据的类往往不是一个真正的类。请考虑把类似DatabaseInitialization（数据库初始化）或StringBuilder（字符串构造器）这样的类变成其他类的一个子程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;创建类的理由&lt;ul&gt;
&lt;li&gt;对现实世界中的对象建模&lt;/li&gt;
&lt;li&gt;对抽象对象建模&lt;/li&gt;
&lt;li&gt;降低复杂度&lt;/li&gt;
&lt;li&gt;隔离复杂度&lt;/li&gt;
&lt;li&gt;隐藏实现细节&lt;/li&gt;
&lt;li&gt;限制变化所影响的范围&lt;/li&gt;
&lt;li&gt;隐藏全局数据&lt;/li&gt;
&lt;li&gt;让参数传递更顺畅&lt;/li&gt;
&lt;li&gt;创建中心控制点&lt;/li&gt;
&lt;li&gt;让代码更易于重用&lt;/li&gt;
&lt;li&gt;为程序族做计划&lt;/li&gt;
&lt;li&gt;把相关操作放到一起&lt;/li&gt;
&lt;li&gt;实现特定的重构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;本章要点：&lt;ul&gt;
&lt;li&gt;类的接口应提供一致的抽象。很多问题都是违背该原则引起的。&lt;/li&gt;
&lt;li&gt;类的接口应隐藏一些信息——如某个系统接口、某项设计决策、或一些实现细节。&lt;/li&gt;
&lt;li&gt;包含往往比继承更为可取——除非你要对“是一个/is a ”的关系建模。&lt;/li&gt;
&lt;li&gt;继承是一种有用的工具，但它却会增加复杂度，这有违于软件的首要技术使命——管理复杂度&lt;/li&gt;
&lt;li&gt;类是管理复杂度的首选工具。要在设计类时给予足够的关注，才能实现这一目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第四章、关键的“构建”决策&quot;&gt;&lt;a href=&quot;#第四章、关键的“构建”决策&quot; class=&quot;headerlink&quot; title=&quot;第四章、关键的“构建”决策&quot;&gt;&lt;/a&gt;第四章、关键的“构建”决策&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每种编程语言都有其优点和缺点。要知道你使用语言的明确优点和缺点。&lt;/li&gt;
&lt;li&gt;在开始编程之前，做好一些约定（convention）。“改变代码使之符合这些约定”是近乎不可能的。&lt;/li&gt;
&lt;li&gt;“构建的实践方法”的种类比任何单个项目能用到的要多。有意识地选择最适合你的项目的实践方法。&lt;/li&gt;
&lt;li&gt;问问你自己，你采用的编程实践是对你所用的编程语言的正确响应，还是受它的控制？要记得“深入一种语言去编程”，不要仅“在一种语言上编程”。&lt;/li&gt;
&lt;li&gt;你在技术浪潮中的位置决定了哪种方法是有效的——甚至是可能用到的。确定你在技术浪潮中的位置，并相应调整计划和预期目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第五章、软件构建中的设计&quot;&gt;&lt;a href=&quot;#第五章、软件构建中的设计&quot; class=&quot;headerlink&quot; title=&quot;第五章、软件构建中的设计&quot;&gt;&lt;/a&gt;第五章、软件构建中的设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设计范畴内的特征&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最小复杂度（Minimal complexity）&lt;/li&gt;
&lt;li&gt;易于维护（Ease of maintenance）&lt;/li&gt;
&lt;li&gt;松散耦合（loose coupling）（抵耦合）&lt;/li&gt;
&lt;li&gt;可扩展性（extensibility）&lt;/li&gt;
&lt;li&gt;可重用性（reusability）&lt;/li&gt;
&lt;li&gt;高扇入（high fan-in）：多使用底层工具类（utility class）&lt;/li&gt;
&lt;li&gt;低扇出（low fan-out）：一个类里尽量少使用其他类，超过7个可以认为高扇出&lt;/li&gt;
&lt;li&gt;可移植性（portability）&lt;/li&gt;
&lt;li&gt;精简性（leanness）&lt;/li&gt;
&lt;li&gt;层次性（stratification）&lt;/li&gt;
&lt;li&gt;标准技术（Standard techniques）
    
    </summary>
    
      <category term="读书" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="代码大全2" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A82/"/>
    
  </entry>
  
  <entry>
    <title>《代码大全2》要点摘要（一）</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2015/01/02/code1/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2015/01/02/code1/</id>
    <published>2015-01-02T01:56:09.000Z</published>
    <updated>2016-06-20T03:20:12.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;构建活动中的具体任务（task）&quot;&gt;&lt;a href=&quot;#构建活动中的具体任务（task）&quot; class=&quot;headerlink&quot; title=&quot;构建活动中的具体任务（task）&quot;&gt;&lt;/a&gt;构建活动中的具体任务（task）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;验证有关的基础工作已经完成，因此构建活动可以顺利的进行下去。&lt;/li&gt;
&lt;li&gt;确定如何测试所写的代码。&lt;/li&gt;
&lt;li&gt;设计并编写类（class）和子程序（routine）。&lt;/li&gt;
&lt;li&gt;创建并命名变量（variable）和具名常量（named constant）。&lt;/li&gt;
&lt;li&gt;选择控制结构（control structure），组织语句块。&lt;/li&gt;
&lt;li&gt;对你的代码进行单元测试和集成测试，并排除其中的错误。&lt;/li&gt;
&lt;li&gt;评审开发团队其他成员的底层设计和代码，并让他们评审你的工作。&lt;/li&gt;
&lt;li&gt;润饰代码，仔细进行代码的格式化和注释。&lt;/li&gt;
&lt;li&gt;将单独开发的多个软件组件集成为一体。&lt;/li&gt;
&lt;li&gt;调整代码（tuning code），让它更快、更省资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第一章、要点&quot;&gt;&lt;a href=&quot;#第一章、要点&quot; class=&quot;headerlink&quot; title=&quot;第一章、要点&quot;&gt;&lt;/a&gt;第一章、要点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;软件构建是软件开发的核心活动；构建活动是每个项目中唯一一件必不可少的工作。&lt;/li&gt;
&lt;li&gt;软件构建的主要活动包括：详细设计、编码、调试、集成、开发者测试（developer testing）(包括单元测试和集成测试)。&lt;/li&gt;
&lt;li&gt;构建也常被称作“编码”和“编程”。&lt;/li&gt;
&lt;li&gt;构建活动的质量对软件的质量有着实质性的影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最后，你对“如何进行构建”的理解程度，决定了你这名程序员的优秀程度&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;第二章、-隐喻的力量&quot;&gt;&lt;a href=&quot;#第二章、-隐喻的力量&quot; class=&quot;headerlink&quot; title=&quot;第二章、 隐喻的力量&quot;&gt;&lt;/a&gt;第二章、 隐喻的力量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;隐喻可以理解成类比（analogy），使用隐喻的方法叫做“建模”（modeling）。&lt;/li&gt;
&lt;li&gt;你对隐喻有多理解，也就决定了你对软件开发有多理解。&lt;/li&gt;
&lt;li&gt;对于编程来说，最大的挑战是将问题概念化（conceptualizing）,编程中的许多错误都是概念性的错误。正因为每一个问题在概念上都是独特的，所以要找到一套能解决所有问题的一通百通的指导规则是很难的、甚至是不可能的。如此看来，能一般性的知道大致如何解决问题，至少也和知道如何解决特定问题一样有价值了。&lt;/li&gt;
&lt;li&gt;隐喻是启示而不是算法。因此他们往往有一点随意（sloopy）。&lt;/li&gt;
&lt;li&gt;隐喻把软件开发过程与其他你熟悉的活动联系在一起，帮助你更好的理解。&lt;/li&gt;
&lt;li&gt;有些隐喻比其他一些隐喻更贴切。&lt;/li&gt;
&lt;li&gt;通过把软件的构建过程比作是房屋的建设过程，我们可以发现，仔细的准备是必要的，而大型项目和小型项目之间也是有差异的。&lt;/li&gt;
&lt;li&gt;通过把软件开发中的实践比作是智慧工具箱的工具，我们又发现，每位程序员都有许多工具，但并不存在任何一个能适用于所有工作的工具，因地制宜选择正确工具是成为能有效编程的程序员的关键&lt;/li&gt;
&lt;li&gt;不同的隐喻彼此并不排斥，应当使用对你最有益处的某种的隐喻组合。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第三章、三思而后行：前期准备&quot;&gt;&lt;a href=&quot;#第三章、三思而后行：前期准备&quot; class=&quot;headerlink&quot; title=&quot;第三章、三思而后行：前期准备&quot;&gt;&lt;/a&gt;第三章、三思而后行：前期准备&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;虽然经济景气程度时高时低，但是优秀的程序员永远是紧缺的。人生苦短，当有大量更好的选择摆在你的面前的时候，在一个荒蛮的软件企业中工作是不明智的。&lt;/li&gt;
&lt;li&gt;发现错误的时间要尽可能接近引发该错误的时间，这样修复它所付出的代价才会降到最低。&lt;/li&gt;
&lt;li&gt;构建活动的准备工作的根本目标在于降低风险。要确认你的准备活动是在降低风险，而非增加风险。&lt;/li&gt;
&lt;li&gt;如果你想开发高质量的软件，软件开发过程中必须由始至终关注质量。在项目初期关注质量，对产品质量的正面影响比在项目末期关注质量的影响要大。&lt;/li&gt;
&lt;li&gt;程序员的一部分工作是教育老板和合作者，告诉他们软件开发过程中，包括在开始编程之前进行充分准备的重要性。&lt;/li&gt;
&lt;li&gt;你所从事的软件项目的类型对构建活动的前期准备有重大影响——许多项目应该是高度迭代式，某些应该是序列式的。&lt;/li&gt;
&lt;li&gt;如果没有明确的问题定义，那么你可能会在构建期间解决错误的问题。&lt;/li&gt;
&lt;li&gt;如果没有做完良好的需求分析工作，你可能没能觉察待解决的问题的重要细节。如果需求变更发生在构建之后的阶段，其代价是“在项目早期更改需求”的20倍至100倍。因此开始编程之前，你要确认“需求”已经到位了。&lt;/li&gt;
&lt;li&gt;如果没有做完良好的架构设计，你可能会在构建期间用错误的方法解决正确的问题。架构变更的代价随着“为错误的架构编写的代码数量”增加而增加，因此，也要确认“架构”已经到位了。&lt;/li&gt;
&lt;li&gt;理解项目的前期准备所采用的方法，并相应的选择架构方法。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;构建活动中的具体任务（task）&quot;&gt;&lt;a href=&quot;#构建活动中的具体任务（task）&quot; class=&quot;headerlink&quot; title=&quot;构建活动中的具体任务（task）&quot;&gt;&lt;/a&gt;构建活动中的具体任务（task）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;验证有关的基础工作已经完成，因此构建活动可以顺利的进行下去。&lt;/li&gt;
&lt;li&gt;确定如何测试所写的代码。&lt;/li&gt;
&lt;li&gt;设计并编写类（class）和子程序（routine）。&lt;/li&gt;
&lt;li&gt;创建并命名变量（variable）和具名常量（named constant）。&lt;/li&gt;
&lt;li&gt;选择控制结构（control structure），组织语句块。&lt;/li&gt;
&lt;li&gt;对你的代码进行单元测试和集成测试，并排除其中的错误。&lt;/li&gt;
&lt;li&gt;评审开发团队其他成员的底层设计和代码，并让他们评审你的工作。&lt;/li&gt;
&lt;li&gt;润饰代码，仔细进行代码的格式化和注释。&lt;/li&gt;
&lt;li&gt;将单独开发的多个软件组件集成为一体。&lt;/li&gt;
&lt;li&gt;调整代码（tuning code），让它更快、更省资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第一章、要点&quot;&gt;&lt;a href=&quot;#第一章、要点&quot; class=&quot;headerlink&quot; title=&quot;第一章、要点&quot;&gt;&lt;/a&gt;第一章、要点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;软件构建是软件开发的核心活动；构建活动是每个项目中唯一一件必不可少的工作。&lt;/li&gt;
&lt;li&gt;软件构建的主要活动包括：详细设计、编码、调试、集成、开发者测试（developer testing）(包括单元测试和集成测试)。&lt;/li&gt;
&lt;li&gt;构建也常被称作“编码”和“编程”。&lt;/li&gt;
&lt;li&gt;构建活动的质量对软件的质量有着实质性的影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最后，你对“如何进行构建”的理解程度，决定了你这名程序员的优秀程度&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="读书" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="代码大全2" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A82/"/>
    
  </entry>
  
  <entry>
    <title>苹果开发者账号邓白氏码申请注意事项</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2014/12/29/dbs/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2014/12/29/dbs/</id>
    <published>2014-12-29T02:56:09.000Z</published>
    <updated>2016-06-20T03:20:19.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;苹果开发者账号分为三种&quot;&gt;&lt;a href=&quot;#苹果开发者账号分为三种&quot; class=&quot;headerlink&quot; title=&quot;苹果开发者账号分为三种&quot;&gt;&lt;/a&gt;苹果开发者账号分为三种&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;299美元的企业账号&lt;br&gt;99美元的个人账号&lt;br&gt;以公司名义申请的99美元账号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果我们是个人开发者，只要申请99美元的开发者账号即可；&lt;/li&gt;
&lt;li&gt;如果是企业内部使用，开发的应用只在企业内部分发使用，不用上传到App Store(此种账号也无法提交应用到app store)，需要申请299美元的企业账号，这个一直都需要邓白氏码的；&lt;/li&gt;
&lt;li&gt;如果你是给公司或者跟客户开发的应用，这个应用肯定又是要提交至App Store的，那最好是要以公司的名义来申请99美元的开发者账号；这种开发者账号在以前和个人名义申请的一样也不需要邓白氏码，不过现在苹果要求只要以公司名义申请的开发者账号一律都要提供邓白氏编码，如果你是初次给公司申请这个编码有可能会遇到各种各样的坑，不过不用怕，跟着我总结的成功申请N&amp;gt;5家以上公司的邓白氏码的经验，相信会帮你少走很多弯路；&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;闲言少叙，废话不多说，直接上图！图所传达的信息量大也够直观&lt;/p&gt;
&lt;h4 id=&quot;1、填写基本表单信息&quot;&gt;&lt;a href=&quot;#1、填写基本表单信息&quot; class=&quot;headerlink&quot; title=&quot;1、填写基本表单信息&quot;&gt;&lt;/a&gt;1、填写基本表单信息&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/dnb1.png&quot; alt=&quot;dnb1.png&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;2、邓白氏中心发来的确认提交申请的邮件&quot;&gt;&lt;a href=&quot;#2、邓白氏中心发来的确认提交申请的邮件&quot; class=&quot;headerlink&quot; title=&quot;2、邓白氏中心发来的确认提交申请的邮件&quot;&gt;&lt;/a&gt;2、邓白氏中心发来的确认提交申请的邮件&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;填好之后继续下一步即可，下一页面会让你再次确认所填信息，如果确认没有错误直接submit即可；提交之后你就会在你所填邮箱收到一封邓白氏中心发来的邮件，提醒你你的申请他们已经收到，会有个相对应的申请的编码，大概什么时候能和数据库同步会有一个大概的日期，如图：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/dnbEmail.png&quot; alt=&quot;dnbEmail.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3、提供公司详细信息资料&quot;&gt;&lt;a href=&quot;#3、提供公司详细信息资料&quot; class=&quot;headerlink&quot; title=&quot;3、提供公司详细信息资料&quot;&gt;&lt;/a&gt;3、提供公司详细信息资料&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;之后邓白氏中国公司（在上海）会联系到你，首先确认你是否申请过邓白氏码，如果是，他会给你再发一封邮件，让你提供公司中英文的详细信息，总共八项吧：如图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/queren.png&quot; alt=&quot;queren.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;4、申请成功&quot;&gt;&lt;a href=&quot;#4、申请成功&quot; class=&quot;headerlink&quot; title=&quot;4、申请成功&quot;&gt;&lt;/a&gt;4、申请成功&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这封邮件发送之后，他们会在24小时之内审核，一般上午提交下午就能收到邓白氏码，如果一直没收到的话就打他们客服电话 &lt;code&gt;021-26107504&lt;/code&gt;,来看一下你收到邓白氏码将会是什么样子吧：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;img src=&quot;/images/result.png&quot; alt=&quot;result.png&quot;&gt;&lt;/p&gt;
&lt;p&gt; 来到这里，下一步你就可以愉快的进行苹果开发者账号的申请了，有什么疑问可以给我评论留言&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;苹果开发者账号分为三种&quot;&gt;&lt;a href=&quot;#苹果开发者账号分为三种&quot; class=&quot;headerlink&quot; title=&quot;苹果开发者账号分为三种&quot;&gt;&lt;/a&gt;苹果开发者账号分为三种&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;299美元的企业账号&lt;br&gt;99美元的个人账号&lt;br&gt;以公司名义申请的99美元账号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果我们是个人开发者，只要申请99美元的开发者账号即可；&lt;/li&gt;
&lt;li&gt;如果是企业内部使用，开发的应用只在企业内部分发使用，不用上传到App Store(此种账号也无法提交应用到app store)，需要申请299美元的企业账号，这个一直都需要邓白氏码的；&lt;/li&gt;
&lt;li&gt;如果你是给公司或者跟客户开发的应用，这个应用肯定又是要提交至App Store的，那最好是要以公司的名义来申请99美元的开发者账号；这种开发者账号在以前和个人名义申请的一样也不需要邓白氏码，不过现在苹果要求只要以公司名义申请的开发者账号一律都要提供邓白氏编码，如果你是初次给公司申请这个编码有可能会遇到各种各样的坑，不过不用怕，跟着我总结的成功申请N&amp;gt;5家以上公司的邓白氏码的经验，相信会帮你少走很多弯路；
    
    </summary>
    
      <category term="iOS" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/iOS/"/>
    
      <category term="开发者账号" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2014/12/23/helloworld/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2014/12/23/helloworld/</id>
    <published>2014-12-23T04:39:04.000Z</published>
    <updated>2016-06-22T07:35:20.000Z</updated>
    
    <content type="html">&lt;p&gt;每个程序员内心都有一个Hello World情节吧~当你能够驾驭电脑向这个世界发声的时候内心多少都会有点小激动吧！不过从此也走上了一条不归路，而且路上还有无数个坑在等着你！不管学什么语言，&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;也许你最初的梦想是这样的&lt;img src=&quot;/images/plan1.png&quot; alt=&quot;plan1.png&quot;&gt;&lt;br&gt;不过现实往往是这个样子滴&lt;img src=&quot;/images/plan2.png&quot; alt=&quot;plan2.png&quot;&gt;&lt;br&gt;当你跨过了一个个坑，翻过了一座座墙，完成了一堆蛋疼的需求，攻克了无数诡异的bug之后，你内心会变的越来越强大，直到有一天你从代码的世界走出来，来到真实的世界同样也能以一种“Hello World”的心态来面对现实的世界，这也算是一种境界吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;每个程序员内心都有一个Hello World情节吧~当你能够驾驭电脑向这个世界发声的时候内心多少都会有点小激动吧！不过从此也走上了一条不归路，而且路上还有无数个坑在等着你！不管学什么语言，
    
    </summary>
    
      <category term="随笔" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="感悟" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>HTML的一些注意事项</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2014/03/19/htmlsomething/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2014/03/19/htmlsomething/</id>
    <published>2014-03-18T16:00:09.000Z</published>
    <updated>2016-08-28T16:50:52.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一、我对语义化的一些理解&quot;&gt;&lt;a href=&quot;#一、我对语义化的一些理解&quot; class=&quot;headerlink&quot; title=&quot;一、我对语义化的一些理解&quot;&gt;&lt;/a&gt;一、我对语义化的一些理解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1，去掉或者丢失样式的时候能够让页面呈现出清晰的结构&lt;/li&gt;
&lt;li&gt;2，有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；&lt;/li&gt;
&lt;li&gt;3，方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；&lt;/li&gt;
&lt;li&gt;4，便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;二、Doctype作用-严格模式与混杂模式如何区分？它们有何意义&quot;&gt;&lt;a href=&quot;#二、Doctype作用-严格模式与混杂模式如何区分？它们有何意义&quot; class=&quot;headerlink&quot; title=&quot;二、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?&quot;&gt;&lt;/a&gt;二、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;（1）、&amp;lt;!DOCTYPE&amp;gt; 声明位于文档中的最前面，处于 &lt;html&gt; 标签之前。告知浏览器以何种模式来渲染文档。 &lt;/html&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;（2）、严格模式的排版和 JS 运作模式是  以该浏览器支持的最高标准运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（3）、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（4）、DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;三、文档声明头&quot;&gt;&lt;a href=&quot;#三、文档声明头&quot; class=&quot;headerlink&quot; title=&quot;三、文档声明头&quot;&gt;&lt;/a&gt;三、文档声明头&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;任何一个标准的HTML页面，第一行一定是一个以&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE ……&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;开头的语句。&lt;br&gt;这一行，就是文档声明头，DocType Declaration。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。&lt;br&gt;到底有哪些规范呢？&lt;br&gt;首先我们先确定一件事儿，我们现在最常用的的是HTML4.01这个版本，这个版本是IE6开始兼容的。HTML5是IE9开开始兼容的。但是IE6、7、8这些浏览器还不能过早的淘汰，所以这几年网页还是应该用HTML4.01来制作。现在由于手机、移动端的普及，响应式H5移动web端已经成为主流。&lt;br&gt;HTML4.01里面有两大种规范，每大种规范里面又各有3种小规范。所以一共6种规范（见下面）：&lt;br&gt;HTML4.01里面规定了普通、XHTML两大种规范。&lt;br&gt;HTML觉得自己有一些规定不严谨，比如，标签是否可以用大写字母呢？&lt;br&gt;&lt;/p&gt;&lt;h1&gt;&lt;/h1&gt;&lt;br&gt;所以，HTML就觉得，把一些规范严格的标准，又制定了一个XHTML1.0。在XHTML中的字母X，表示“严格的”。&lt;br&gt;总结一下，一共有6种DTD，说白了，HTML第一行语句一共有6种：&lt;p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;大规范&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;里面的小规范&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTML4.01&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Strict        严格的，体现在一些标签不能使用，比如u，Transitional   普通的，Frameset     带有框架的页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XHTML1.0严格体现在小写标签、闭合、引号&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Strict          严格的，体现在一些标签不能使用，比如u，Transitional    普通的，Frameset      带有框架的页面&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;strict表示“严格的”，这种模式里面的要求更为严格。这种严格体现在哪里？有一些标签不能使用。&lt;br&gt;比如，u标签，就是可以让一个本文加上下划线，但是这和HTML的本质有冲突，因为HTML只能负责语义，不能负责样式，而u这个下划线是样式。所以，在strict中是不能使用u标签的。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Transitional 表示“普通的”，这种模式就是没有一些别的规范。&lt;/li&gt;
&lt;li&gt;Frameset 表示“框架”，在框架的页面使用&lt;/li&gt;
&lt;li&gt;HTML5中极大的简化了DTD，也就是说HTML5中就没有XHTML了（W3C自己打脸了）：&lt;br&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;四、字符集&quot;&gt;&lt;a href=&quot;#四、字符集&quot; class=&quot;headerlink&quot; title=&quot;四、字符集&quot;&gt;&lt;/a&gt;四、字符集&lt;/h2&gt;&lt;p&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;&lt;br&gt;字符集用meta标签定义，meta表示“元”。“元”配置，就是表示基本的配置项目。&lt;br&gt;charset就是charactor set“字符集”的意思。&lt;br&gt;中文能够使用的字符集两种：&lt;br&gt;第一种：UTF-8&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html;charset=UTF-8&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二种：gb2312&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html;charset=gb2312&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;也可以写成gbk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html;charset=gbk&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;常用的两种字符集UTF-8和gb2312。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8是国际通用字库，里面涵盖了所有地球上所有人类的语言文字，比如阿拉伯文、汉语、鸟语……&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;gb2312 是国标，是中国的字库，里面仅涵盖了汉字和一些常用外文，比如日文片假名，和常见的符号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字库规模：  UTF-8（字全） &amp;gt; gb2312（只有汉字&lt;/p&gt;
&lt;p&gt;注意，由于UTF-8里面保存了世界上所有人类语言，所以描述一个汉字需要的码更多。&lt;br&gt;UTF-8里面存储一个汉字3个字节。而gb2312中存储一个汉字2个字节。&lt;/p&gt;
&lt;p&gt;保存大小：   UTF-8（更臃肿、加载更慢） &amp;gt; gb2312 （更小巧，加载更快）&lt;/p&gt;
&lt;p&gt;总结：&lt;br&gt;UTF-8 字多，有各种国家的语言，但是保存尺寸大，文件臃肿；&lt;br&gt;gb2312字少，只用中文和少数外语和符号，但是尺寸小，文件小巧。&lt;/p&gt;
&lt;p&gt;列出2个使用情形：&lt;br&gt;1） 如果公司是做日本动漫的，经常出现一些日语动漫的名字，网页要使用UTF-8。如果用gb2312将无法显示日语。&lt;br&gt;2） 如果公司就是中文网页，极度的追求网页的显示速度，要使用gb2312。如果使用UTF-8将每个汉字多一个byte，所以5000个汉字，多5kb。&lt;/p&gt;
&lt;p&gt;亲测：&lt;br&gt;● qq网、网易、搜狐都是使用gb2312。这些公司，都追求显示速度。&lt;br&gt;● 新华网藏语频道，使用的是UTF-8，保证字符集的数量。&lt;/p&gt;
&lt;h2 id=&quot;五、空白折叠现象&quot;&gt;&lt;a href=&quot;#五、空白折叠现象&quot; class=&quot;headerlink&quot; title=&quot;五、空白折叠现象&quot;&gt;&lt;/a&gt;五、空白折叠现象&lt;/h2&gt;&lt;p&gt;HTML中所有的文字之间，如果有空格、换行、tab都将被折叠为一个空格显示。&lt;/p&gt;
&lt;h2 id=&quot;六、常用HTML标签的分类&quot;&gt;&lt;a href=&quot;#六、常用HTML标签的分类&quot; class=&quot;headerlink&quot; title=&quot;六、常用HTML标签的分类&quot;&gt;&lt;/a&gt;六、常用HTML标签的分类&lt;/h2&gt;&lt;p&gt;HTML标签是分等级的，HTML将所有的标签分为两种：容器级、文本级。&lt;br&gt;顾名思义，容器级的标签，里面可以放置任何东西；文本级的标签里面，只能放置文字、图片、表单元素。&lt;/p&gt;
&lt;p&gt;p标签是一个文本级标签，所以p里面只能放文字、图片、表单元素。其他的一律不能放。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文本级：p、span、a、b、i、u、em&lt;/li&gt;
&lt;li&gt;容器级：div、h系列、li、dt、dd&lt;br&gt;而按照CSS的块级元素和行内元素划分的话：&lt;/li&gt;
&lt;li&gt;行内元素：span、a、b、i、u、em&lt;/li&gt;
&lt;li&gt;块级元素：div、h系列、li、dt、dd、p&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、我对语义化的一些理解&quot;&gt;&lt;a href=&quot;#一、我对语义化的一些理解&quot; class=&quot;headerlink&quot; title=&quot;一、我对语义化的一些理解&quot;&gt;&lt;/a&gt;一、我对语义化的一些理解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1，去掉或者丢失样式的时候能够让页面呈现出清晰的
    
    </summary>
    
      <category term="html" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/html/"/>
    
    
      <category term="html" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/html/"/>
    
  </entry>
  
</feed>
