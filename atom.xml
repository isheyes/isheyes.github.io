<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zxy&#39;s Note</title>
  <subtitle>心若向阳，无畏悲伤！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/"/>
  <updated>2016-06-17T04:27:10.000Z</updated>
  <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/</id>
  
  <author>
    <name>zxy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代码大全2要点摘要（二）</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2015/01/05/code2/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2015/01/05/code2/</id>
    <published>2015-01-05T04:09:19.000Z</published>
    <updated>2016-06-17T04:27:10.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;第四章、关键的“构建”决策&quot;&gt;&lt;a href=&quot;#第四章、关键的“构建”决策&quot; class=&quot;headerlink&quot; title=&quot;第四章、关键的“构建”决策&quot;&gt;&lt;/a&gt;第四章、关键的“构建”决策&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每种编程语言都有其优点和缺点。要知道你使用语言的明确优点和缺点。&lt;/li&gt;
&lt;li&gt;在开始编程之前，做好一些约定（convention）。“改变代码使之符合这些约定”是近乎不可能的。&lt;/li&gt;
&lt;li&gt;“构建的实践方法”的种类比任何单个项目能用到的要多。有意识地选择最适合你的项目的实践方法。&lt;/li&gt;
&lt;li&gt;问问你自己，你采用的编程实践是对你所用的编程语言的正确响应，还是受它的控制？要记得“深入一种语言去编程”，不要仅“在一种语言上编程”。&lt;/li&gt;
&lt;li&gt;你在技术浪潮中的位置决定了哪种方法是有效的——甚至是可能用到的。确定你在技术浪潮中的位置，并相应调整计划和预期目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第五章、软件构建中的设计&quot;&gt;&lt;a href=&quot;#第五章、软件构建中的设计&quot; class=&quot;headerlink&quot; title=&quot;第五章、软件构建中的设计&quot;&gt;&lt;/a&gt;第五章、软件构建中的设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设计范畴内的特征&lt;ol&gt;
&lt;li&gt;最小复杂度（Minimal complexity）&lt;/li&gt;
&lt;li&gt;易于维护（Ease of maintenance）&lt;/li&gt;
&lt;li&gt;松散耦合（loose coupling）（抵耦合）&lt;/li&gt;
&lt;li&gt;可扩展性（extensibility）&lt;/li&gt;
&lt;li&gt;可重用性（reusability）&lt;/li&gt;
&lt;li&gt;高扇入（high fan-in）：多使用底层工具类（utility class）&lt;/li&gt;
&lt;li&gt;低扇出（low fan-out）：一个类里尽量少使用其他类，超过7个可以认为高扇出&lt;/li&gt;
&lt;li&gt;可移植性（portability）&lt;/li&gt;
&lt;li&gt;精简性（leanness）&lt;/li&gt;
&lt;li&gt;层次性（stratification）&lt;/li&gt;
&lt;li&gt;标准技术（Standard techniques）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;一个程序中的设计层次&lt;ul&gt;
&lt;li&gt;1.系统&lt;/li&gt;
&lt;li&gt;2.首先被组织为子系统&lt;/li&gt;
&lt;li&gt;3.子系统被进一步分解为类&lt;/li&gt;
&lt;li&gt;4.然后类又被分解为子程序和数据&lt;/li&gt;
&lt;li&gt;5.每个子程序的内部也需要进行设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;举个例子，把一个系统划分为六个子系统。在没有定义任何规则时，热力学第二定律就会发生作用，整个系统的熵就会增加。熵所以增加的一种原因是，如果不对子系统间的通信施加任何限制，那么他们之间的通信就会肆意发生,如图：&lt;br&gt;&lt;img src=&quot;/images/system1.png&quot; alt=&quot;system1.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/system2.png&quot; alt=&quot;system2.png&quot;&gt;&lt;br&gt;施加若干通信规则后，子系统之间的交互得以显著的简化&lt;br&gt;&lt;img src=&quot;/images/system3.png&quot; alt=&quot;system3.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;抽象：抽象是一种能让你关注某一概念的同时可以放心的忽略其中一些细节的能力——在不同的层次处理不同的细节。抽象无处不在，日常生活中城镇、房屋、门、门把手等等我们都在不知不觉的用到了抽象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;关于封装迄今为止感觉类比的最贴切的一段描述&lt;ul&gt;
&lt;li&gt;封装实现细节：封装填补了抽象留下的空白。抽象是说：”可以让你从高层的细节来看待一个对象。“而封装则说：”除此之外，你不能看到对象的任何其他细节层次“。&lt;/li&gt;
&lt;li&gt;继续刚才关于房屋材质的比喻：封装是说，你可以从房屋的外面看，但不能靠的太近把门的细节都看清楚。可以让你知道哪里有门，门是开着的还是关着的，但不能让你知道门是木制的、纤维玻璃的、钢质的还是其他什么材质的，当然更不能让你看到每一根木纤维。&lt;/li&gt;
&lt;li&gt;封装是说：不只是让你能用简化的视图来看复杂的概念，同时还不能让你看到复杂概念的任何细节。你能看得到的就是你能——全部——得到的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;信息隐藏中所说的秘密主要分为两大类：&lt;ul&gt;
&lt;li&gt;隐藏复杂度，这样你就不用再去应付它，除非你要特别关注的时候。&lt;/li&gt;
&lt;li&gt;隐藏变化源，这样当发生变化时，其影响就被限制在局部范围内。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;松散耦合的关键在于，一个有效的模块提供出了一层附加的抽象——一旦你写好了它，你就可以想当然地去用它。这样就降低了整体系统的复杂度，使得你可以在同一时间只关注一件事情。如果对一个模块的使用要求你同时关注好几件事——其内部工作的细节、对全局数据的修改、不确定的功能点等——那么就失去了抽象的能力，模块所具有的管理复杂度的能力就被削弱或完全丧失了。&lt;/li&gt;
&lt;li&gt;类和子程序是降低复杂度的首选和最重要的智力工具。如果他们没有帮助你简化工作，那么它们就是失职的。&lt;/li&gt;
&lt;li&gt;关于设计启发的总结：&lt;ul&gt;
&lt;li&gt;寻求现实世界的对象（object，物体）&lt;/li&gt;
&lt;li&gt;形成一致的抽象&lt;/li&gt;
&lt;li&gt;封装实现细节&lt;/li&gt;
&lt;li&gt;在可能的情况下继承&lt;/li&gt;
&lt;li&gt;藏住秘密（信息隐藏）&lt;/li&gt;
&lt;li&gt;找出容易改变的区域&lt;/li&gt;
&lt;li&gt;保持松散耦合&lt;/li&gt;
&lt;li&gt;探寻通用的设计模式&lt;/li&gt;
&lt;li&gt;高内聚&lt;/li&gt;
&lt;li&gt;构造分层结构&lt;/li&gt;
&lt;li&gt;严格描述类契约&lt;/li&gt;
&lt;li&gt;分配职责&lt;/li&gt;
&lt;li&gt;为测试而设计&lt;/li&gt;
&lt;li&gt;避免失误&lt;/li&gt;
&lt;li&gt;有意识地选择绑定时间&lt;/li&gt;
&lt;li&gt;创建中央控制点&lt;/li&gt;
&lt;li&gt;考虑使用蛮力&lt;/li&gt;
&lt;li&gt;画一个图&lt;/li&gt;
&lt;li&gt;保持设计模块化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;软件的首要技术使命就是管理复杂度。以简单性作为努力目标的设计方案对此最有帮助。&lt;/li&gt;
&lt;li&gt;简单性可以通过两种方式来获取：一是减少在同一时间所关注的本质性复杂度的量，二是避免生成不必要的偶然的复杂度。&lt;/li&gt;
&lt;li&gt;设计是一种启发式的过程。固执于某一种单一方法会损害创新能力，从而损害你的程序。&lt;/li&gt;
&lt;li&gt;好的设计都是迭代的。你尝试的可能性越多，你的最终设计方案就会变得越好。&lt;/li&gt;
&lt;li&gt;信息隐藏是个非常有价值的概念。通过询问”我应该隐藏什么？“能够解决很多困难的设计问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第六章、可以工作的类&quot;&gt;&lt;a href=&quot;#第六章、可以工作的类&quot; class=&quot;headerlink&quot; title=&quot;第六章、可以工作的类&quot;&gt;&lt;/a&gt;第六章、可以工作的类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;抽象数据类型（ADT ： abstract data type）是指一些数据以及对这些数据所进行的操作的集合。&lt;/li&gt;
&lt;li&gt;使用ADT的益处&lt;ul&gt;
&lt;li&gt;可以隐藏实现细节&lt;/li&gt;
&lt;li&gt;改动不会影响整个程序&lt;/li&gt;
&lt;li&gt;让接口能提供更多信息&lt;/li&gt;
&lt;li&gt;更容易提高性能&lt;/li&gt;
&lt;li&gt;让程序的正确性更显而易见&lt;/li&gt;
&lt;li&gt;程序更具有自我说明性&lt;/li&gt;
&lt;li&gt;无需再程序内到处传递数据&lt;/li&gt;
&lt;li&gt;你可以像在现实世界中那样操作实体，而不用再底层实现上操作它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;ADT和类：抽象数据类型构成了“类/class”这一概念的基础。在支持类的编程语言里，你可以把每个抽象数据类型用它自己的类实现。类还涉及到继承和多态两个额外的概念。因此，考虑类的一种方式，就是把它看做是抽象数据类型再加上继承和多态两个概念。&lt;/li&gt;
&lt;li&gt;一些创建类的抽象接口的指导建议：&lt;ul&gt;
&lt;li&gt;类的接口应该展现一致的抽象层次&lt;/li&gt;
&lt;li&gt;一定要理解类所实现的抽象是什么&lt;/li&gt;
&lt;li&gt;提供成对的服务，如操作灯打开，可能需要另一个操作来关闭&lt;/li&gt;
&lt;li&gt;把不相关的信息转移到其他类中&lt;/li&gt;
&lt;li&gt;尽可能让接口可编程，而不是表达语义&lt;/li&gt;
&lt;li&gt;谨防在修改时破坏接口的抽象&lt;/li&gt;
&lt;li&gt;不要添加和接口抽象不一致的公用成员&lt;/li&gt;
&lt;li&gt;同时考虑抽象和内聚性：一个呈现出很好的抽象的类的接口通常也有很高的内聚性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;良好的封装：封装是比抽象更强的概念。抽象通过提供一个可以让你忽略实现细节的模型来管理复杂度，而封装则强制组织你看到实现细节——即便你想这么做。这两个概念之所以相关，是因为没有封装时，抽象往往很容易被打破。依照经验，要么抽象和封装两者共存，要么两者皆失。除此之外没有其它可能。&lt;ul&gt;
&lt;li&gt;尽可能地限制类和成员的可访问性&lt;/li&gt;
&lt;li&gt;不要公开暴露成员数据&lt;/li&gt;
&lt;li&gt;避免把私用的实现细节放入类的接口中&lt;/li&gt;
&lt;li&gt;不要对类的使用者做出任何假设&lt;/li&gt;
&lt;li&gt;避免使用友元类&lt;/li&gt;
&lt;li&gt;让阅读代码比编写代码更方便&lt;/li&gt;
&lt;li&gt;要格外警惕从语义上破坏封装&lt;/li&gt;
&lt;li&gt;留意过于紧密的耦合关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;警惕有超过7个数据成员的类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;研究表明，人们在做其他项目时能记住的离散项目的个数是7±2.如果一个类包含超过7个数据成员，请考虑要不要把它分解为几个更小的类。如果数据成员是整型或字符串这种简单数据类型，可以按7±2的上限来考虑；反之，如果成员都是复杂对象的话，就应该按7±2得下限来考虑了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要么使用继承并进行详细说明，要么就不要用它&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;只有一个实例的类是值得怀疑的（单例除外）&lt;/li&gt;
&lt;li&gt;只有一个派生类的基类也值得怀疑&lt;/li&gt;
&lt;li&gt;派生后覆盖了某个子程序，但在其中没做任何操作，这种情况也值得怀疑&lt;/li&gt;
&lt;li&gt;避免让继承体系过深：依据经验，一般情况下继承超过2到3层时就有麻烦了，过深的继承层次增加了程序的复杂度&lt;/li&gt;
&lt;li&gt;尽量使用多态，避免大量的类型检查&lt;/li&gt;
&lt;li&gt;优先采用深层副本（deep copies），除非论证可行，才采用浅层副本（shallow copies）&lt;/li&gt;
&lt;li&gt;应该避免的类&lt;ul&gt;
&lt;li&gt;避免创建万能类&lt;/li&gt;
&lt;li&gt;消除无关紧要的类&lt;/li&gt;
&lt;li&gt;避免用动词命名的类，只有行为而没有数据的类往往不是一个真正的类。请考虑把类似DatabaseInitialization（数据库初始化）或StringBuilder（字符串构造器）这样的类变成其他类的一个子程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;创建类的理由&lt;ul&gt;
&lt;li&gt;对现实世界中的对象建模&lt;/li&gt;
&lt;li&gt;对抽象对象建模&lt;/li&gt;
&lt;li&gt;降低复杂度&lt;/li&gt;
&lt;li&gt;隔离复杂度&lt;/li&gt;
&lt;li&gt;隐藏实现细节&lt;/li&gt;
&lt;li&gt;限制变化所影响的范围&lt;/li&gt;
&lt;li&gt;隐藏全局数据&lt;/li&gt;
&lt;li&gt;让参数传递更顺畅&lt;/li&gt;
&lt;li&gt;创建中心控制点&lt;/li&gt;
&lt;li&gt;让代码更易于重用&lt;/li&gt;
&lt;li&gt;为程序族做计划&lt;/li&gt;
&lt;li&gt;把相关操作放到一起&lt;/li&gt;
&lt;li&gt;实现特定的重构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;本章要点：&lt;ul&gt;
&lt;li&gt;类的接口应提供一致的抽象。很多问题都是违背该原则引起的。&lt;/li&gt;
&lt;li&gt;类的接口应隐藏一些信息——如某个系统接口、某项设计决策、或一些实现细节。&lt;/li&gt;
&lt;li&gt;包含往往比继承更为可取——除非你要对“是一个/is a ”的关系建模。&lt;/li&gt;
&lt;li&gt;继承是一种有用的工具，但它却会增加复杂度，这有违于软件的首要技术使命——管理复杂度&lt;/li&gt;
&lt;li&gt;类是管理复杂度的首选工具。要在设计类时给予足够的关注，才能实现这一目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第四章、关键的“构建”决策&quot;&gt;&lt;a href=&quot;#第四章、关键的“构建”决策&quot; class=&quot;headerlink&quot; title=&quot;第四章、关键的“构建”决策&quot;&gt;&lt;/a&gt;第四章、关键的“构建”决策&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每种编程语言都有其优点和缺点。要知道你使
    
    </summary>
    
      <category term="读书" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="代码大全2" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A82/"/>
    
  </entry>
  
  <entry>
    <title>代码大全2要点摘要（一）</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2015/01/02/code1/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2015/01/02/code1/</id>
    <published>2015-01-02T01:56:09.000Z</published>
    <updated>2016-06-15T17:36:52.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;构建活动中的具体任务（task）&quot;&gt;&lt;a href=&quot;#构建活动中的具体任务（task）&quot; class=&quot;headerlink&quot; title=&quot;构建活动中的具体任务（task）&quot;&gt;&lt;/a&gt;构建活动中的具体任务（task）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;验证有关的基础工作已经完成，因此构建活动可以顺利的进行下去。&lt;/li&gt;
&lt;li&gt;确定如何测试所写的代码。&lt;/li&gt;
&lt;li&gt;设计并编写类（class）和子程序（routine）。&lt;/li&gt;
&lt;li&gt;创建并命名变量（variable）和具名常量（named constant）。&lt;/li&gt;
&lt;li&gt;选择控制结构（control structure），组织语句块。&lt;/li&gt;
&lt;li&gt;对你的代码进行单元测试和集成测试，并排除其中的错误。&lt;/li&gt;
&lt;li&gt;评审开发团队其他成员的底层设计和代码，并让他们评审你的工作。&lt;/li&gt;
&lt;li&gt;润饰代码，仔细进行代码的格式化和注释。&lt;/li&gt;
&lt;li&gt;将单独开发的多个软件组件集成为一体。&lt;/li&gt;
&lt;li&gt;调整代码（tuning code），让它更快、更省资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第一章、要点&quot;&gt;&lt;a href=&quot;#第一章、要点&quot; class=&quot;headerlink&quot; title=&quot;第一章、要点&quot;&gt;&lt;/a&gt;第一章、要点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;软件构建是软件开发的核心活动；构建活动是每个项目中唯一一件必不可少的工作。&lt;/li&gt;
&lt;li&gt;软件构建的主要活动包括：详细设计、编码、调试、集成、开发者测试（developer testing）(包括单元测试和集成测试)。&lt;/li&gt;
&lt;li&gt;构建也常被称作“编码”和“编程”。&lt;/li&gt;
&lt;li&gt;构建活动的质量对软件的质量有着实质性的影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最后，你对“如何进行构建”的理解程度，决定了你这名程序员的优秀程度&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第二章、-隐喻的力量&quot;&gt;&lt;a href=&quot;#第二章、-隐喻的力量&quot; class=&quot;headerlink&quot; title=&quot;第二章、 隐喻的力量&quot;&gt;&lt;/a&gt;第二章、 隐喻的力量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;隐喻可以理解成类比（analogy），使用隐喻的方法叫做“建模”（modeling）。&lt;/li&gt;
&lt;li&gt;你对隐喻有多理解，也就决定了你对软件开发有多理解。&lt;/li&gt;
&lt;li&gt;对于编程来说，最大的挑战是将问题概念化（conceptualizing）,编程中的许多错误都是概念性的错误。正因为每一个问题在概念上都是独特的，所以要找到一套能解决所有问题的一通百通的指导规则是很难的、甚至是不可能的。如此看来，能一般性的知道大致如何解决问题，至少也和知道如何解决特定问题一样有价值了。&lt;/li&gt;
&lt;li&gt;隐喻是启示而不是算法。因此他们往往有一点随意（sloopy）。&lt;/li&gt;
&lt;li&gt;隐喻把软件开发过程与其他你熟悉的活动联系在一起，帮助你更好的理解。&lt;/li&gt;
&lt;li&gt;有些隐喻比其他一些隐喻更贴切。&lt;/li&gt;
&lt;li&gt;通过把软件的构建过程比作是房屋的建设过程，我们可以发现，仔细的准备是必要的，而大型项目和小型项目之间也是有差异的。&lt;/li&gt;
&lt;li&gt;通过把软件开发中的实践比作是智慧工具箱的工具，我们又发现，每位程序员都有许多工具，但并不存在任何一个能适用于所有工作的工具，因地制宜选择正确工具是成为能有效编程的程序员的关键&lt;/li&gt;
&lt;li&gt;不同的隐喻彼此并不排斥，应当使用对你最有益处的某种的隐喻组合。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第三章、三思而后行：前期准备&quot;&gt;&lt;a href=&quot;#第三章、三思而后行：前期准备&quot; class=&quot;headerlink&quot; title=&quot;第三章、三思而后行：前期准备&quot;&gt;&lt;/a&gt;第三章、三思而后行：前期准备&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;虽然经济景气程度时高时低，但是优秀的程序员永远是紧缺的。人生苦短，当有大量更好的选择摆在你的面前的时候，在一个荒蛮的软件企业中工作是不明智的。&lt;/li&gt;
&lt;li&gt;发现错误的时间要尽可能接近引发该错误的时间，这样修复它所付出的代价才会降到最低。&lt;/li&gt;
&lt;li&gt;构建活动的准备工作的根本目标在于降低风险。要确认你的准备活动是在降低风险，而非增加风险。&lt;/li&gt;
&lt;li&gt;如果你想开发高质量的软件，软件开发过程中必须由始至终关注质量。在项目初期关注质量，对产品质量的正面影响比在项目末期关注质量的影响要大。&lt;/li&gt;
&lt;li&gt;程序员的一部分工作是教育老板和合作者，告诉他们软件开发过程中，包括在开始编程之前进行充分准备的重要性。&lt;/li&gt;
&lt;li&gt;你所从事的软件项目的类型对构建活动的前期准备有重大影响——许多项目应该是高度迭代式，某些应该是序列式的。&lt;/li&gt;
&lt;li&gt;如果没有明确的问题定义，那么你可能会在构建期间解决错误的问题。&lt;/li&gt;
&lt;li&gt;如果没有做完良好的需求分析工作，你可能没能觉察待解决的问题的重要细节。如果需求变更发生在构建之后的阶段，其代价是“在项目早期更改需求”的20倍至100倍。因此开始编程之前，你要确认“需求”已经到位了。&lt;/li&gt;
&lt;li&gt;如果没有做完良好的架构设计，你可能会在构建期间用错误的方法解决正确的问题。架构变更的代价随着“为错误的架构编写的代码数量”增加而增加，因此，也要确认“架构”已经到位了。&lt;/li&gt;
&lt;li&gt;理解项目的前期准备所采用的方法，并相应的选择架构方法。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;构建活动中的具体任务（task）&quot;&gt;&lt;a href=&quot;#构建活动中的具体任务（task）&quot; class=&quot;headerlink&quot; title=&quot;构建活动中的具体任务（task）&quot;&gt;&lt;/a&gt;构建活动中的具体任务（task）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;验证有关的基础工
    
    </summary>
    
      <category term="读书" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="代码大全2" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A82/"/>
    
  </entry>
  
  <entry>
    <title>苹果开发者账号邓白氏码申请注意事项</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2014/12/29/dbs/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2014/12/29/dbs/</id>
    <published>2014-12-29T02:56:09.000Z</published>
    <updated>2016-06-15T09:55:01.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;苹果开发者账号分为三种&quot;&gt;&lt;a href=&quot;#苹果开发者账号分为三种&quot; class=&quot;headerlink&quot; title=&quot;苹果开发者账号分为三种&quot;&gt;&lt;/a&gt;苹果开发者账号分为三种&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;299美元的企业账号&lt;br&gt;99美元的个人账号&lt;br&gt;以公司名义申请的99美元账号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果我们是个人开发者，只要申请99美元的开发者账号即可；&lt;/li&gt;
&lt;li&gt;如果是企业内部使用，开发的应用只在企业内部分发使用，不用上传到App Store(此种账号也无法提交应用到app store)，需要申请299美元的企业账号，这个一直都需要邓白氏码的；&lt;/li&gt;
&lt;li&gt;如果你是给公司或者跟客户开发的应用，这个应用肯定又是要提交至App Store的，那最好是要以公司的名义来申请99美元的开发者账号；这种开发者账号在以前和个人名义申请的一样也不需要邓白氏码，不过现在苹果要求只要以公司名义申请的开发者账号一律都要提供邓白氏编码，如果你是初次给公司申请这个编码有可能会遇到各种各样的坑，不过不用怕，跟着我总结的成功申请N&amp;gt;5家以上公司的邓白氏码的经验，相信会帮你少走很多弯路；&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;闲言少叙，废话不多说，直接上图！图所传达的信息量大也够直观&lt;/p&gt;
&lt;h4 id=&quot;1、填写基本表单信息&quot;&gt;&lt;a href=&quot;#1、填写基本表单信息&quot; class=&quot;headerlink&quot; title=&quot;1、填写基本表单信息&quot;&gt;&lt;/a&gt;1、填写基本表单信息&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/dnb1.png&quot; alt=&quot;dnb1.png&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;2、邓白氏中心发来的确认提交申请的邮件&quot;&gt;&lt;a href=&quot;#2、邓白氏中心发来的确认提交申请的邮件&quot; class=&quot;headerlink&quot; title=&quot;2、邓白氏中心发来的确认提交申请的邮件&quot;&gt;&lt;/a&gt;2、邓白氏中心发来的确认提交申请的邮件&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;填好之后继续下一步即可，下一页面会让你再次确认所填信息，如果确认没有错误直接submit即可；提交之后你就会在你所填邮箱收到一封邓白氏中心发来的邮件，提醒你你的申请他们已经收到，会有个相对应的申请的编码，大概什么时候能和数据库同步会有一个大概的日期，如图：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/dnbEmail.png&quot; alt=&quot;dnbEmail.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3、提供公司详细信息资料&quot;&gt;&lt;a href=&quot;#3、提供公司详细信息资料&quot; class=&quot;headerlink&quot; title=&quot;3、提供公司详细信息资料&quot;&gt;&lt;/a&gt;3、提供公司详细信息资料&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;之后邓白氏中国公司（在上海）会联系到你，首先确认你是否申请过邓白氏码，如果是，他会给你再发一封邮件，让你提供公司中英文的详细信息，总共八项吧：如图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/queren.png&quot; alt=&quot;queren.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;4、申请成功&quot;&gt;&lt;a href=&quot;#4、申请成功&quot; class=&quot;headerlink&quot; title=&quot;4、申请成功&quot;&gt;&lt;/a&gt;4、申请成功&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这封邮件发送之后，他们会在24小时之内审核，一般上午提交下午就能收到邓白氏码，如果一直没收到的话就打他们客服电话 &lt;code&gt;021-26107504&lt;/code&gt;,来看一下你收到邓白氏码将会是什么样子吧：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;img src=&quot;/images/result.png&quot; alt=&quot;result.png&quot;&gt;&lt;/p&gt;
&lt;p&gt; 来到这里，下一步你就可以愉快的进行苹果开发者账号的申请了，有什么疑问可以给我评论留言&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;苹果开发者账号分为三种&quot;&gt;&lt;a href=&quot;#苹果开发者账号分为三种&quot; class=&quot;headerlink&quot; title=&quot;苹果开发者账号分为三种&quot;&gt;&lt;/a&gt;苹果开发者账号分为三种&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;299美元的企业账号&lt;br&gt;99美元的个人
    
    </summary>
    
      <category term="iOS" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/iOS/"/>
    
      <category term="开发者账号" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2014/12/23/helloworld/"/>
    <id>http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/2014/12/23/helloworld/</id>
    <published>2014-12-23T04:39:04.000Z</published>
    <updated>2016-06-15T08:18:24.000Z</updated>
    
    <content type="html">&lt;p&gt;每个程序员内心都有一个Hello World情节吧~当你能够驾驭电脑向这个世界发声的时候内心多少都会有点小激动吧！不过从此也走上了一条不归路，而且路上还有无数个坑在等着你！不管学什么语言，&lt;br&gt;也许你最初的梦想是这样的&lt;img src=&quot;/images/plan1.png&quot; alt=&quot;plan1.png&quot;&gt;&lt;br&gt;不过现实往往是这个样子滴&lt;img src=&quot;/images/plan2.png&quot; alt=&quot;plan2.png&quot;&gt;&lt;br&gt;当你跨过了一个个坑，翻过了一座座墙，完成了一堆蛋疼的需求，攻克了无数诡异的bug之后，你内心会变的越来越强大，直到有一天你从代码的世界走出来，来到真实的世界同样也能以一种“Hello World”的心态来面对现实的世界，这也算是一种境界吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;每个程序员内心都有一个Hello World情节吧~当你能够驾驭电脑向这个世界发声的时候内心多少都会有点小激动吧！不过从此也走上了一条不归路，而且路上还有无数个坑在等着你！不管学什么语言，&lt;br&gt;也许你最初的梦想是这样的&lt;img src=&quot;/images/plan1.png
    
    </summary>
    
      <category term="随笔" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="感悟" scheme="http://tva3.sinaimg.cn/crop.0.0.233.233.180/c33351cbjw8f1v28nvy92j206j06iglx.jpg/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
